[{"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\index.js":"1","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\reportWebVitals.js":"2","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\App.js":"3","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Home\\Home.js":"4","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\auth\\Login.js":"5","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\auth\\Signup.js":"6","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\Dashboard.js":"7","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Page404.js":"8","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\CreateForm.js":"9","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\EditableForm.js":"10","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\SubmissionStatus.js":"11","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Context\\AuthContext.js":"12","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\Responses.js":"13","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\FormToFill.js":"14","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Home\\Navbar.js":"15","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\DashboardListItem.js":"16","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\AddFormElements.js":"17","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\SingleResponse.js":"18","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\Checkboxes.js":"19","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\SingleLine.js":"20","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\RadioBtn.js":"21","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\Textarea.js":"22","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\TextareaInputDetails.js":"23","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\SingleLineInputDetails.js":"24","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\CheckboxesDetailsPanel.js":"25","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\RadioBtnDetailsPanel.js":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":1590,"mtime":1611154389450,"results":"30","hashOfConfig":"28"},{"size":1125,"mtime":1611214007400,"results":"31","hashOfConfig":"28"},{"size":3114,"mtime":1611225241916,"results":"32","hashOfConfig":"28"},{"size":3339,"mtime":1611225287817,"results":"33","hashOfConfig":"28"},{"size":4717,"mtime":1611160928113,"results":"34","hashOfConfig":"28"},{"size":370,"mtime":1609949525575,"results":"35","hashOfConfig":"28"},{"size":7196,"mtime":1611161303613,"results":"36","hashOfConfig":"28"},{"size":9395,"mtime":1611161765589,"results":"37","hashOfConfig":"28"},{"size":945,"mtime":1611221490000,"results":"38","hashOfConfig":"28"},{"size":1731,"mtime":1611161685798,"results":"39","hashOfConfig":"28"},{"size":3445,"mtime":1619788500803,"results":"40","hashOfConfig":"28"},{"size":3114,"mtime":1611220984245,"results":"41","hashOfConfig":"28"},{"size":2873,"mtime":1611214167095,"results":"42","hashOfConfig":"28"},{"size":2795,"mtime":1611161309924,"results":"43","hashOfConfig":"28"},{"size":2967,"mtime":1611225637785,"results":"44","hashOfConfig":"28"},{"size":1495,"mtime":1619783414998,"results":"45","hashOfConfig":"28"},{"size":1483,"mtime":1611225700309,"results":"46","hashOfConfig":"28"},{"size":1147,"mtime":1611226347254,"results":"47","hashOfConfig":"28"},{"size":1481,"mtime":1611225708184,"results":"48","hashOfConfig":"28"},{"size":2053,"mtime":1611226360029,"results":"49","hashOfConfig":"28"},{"size":2431,"mtime":1611213199019,"results":"50","hashOfConfig":"28"},{"size":2270,"mtime":1611212883922,"results":"51","hashOfConfig":"28"},{"size":4915,"mtime":1611225785913,"results":"52","hashOfConfig":"28"},{"size":4908,"mtime":1611225772049,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1c3lhve",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\index.js",[],["119","120"],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\reportWebVitals.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\App.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Home\\Home.js",["121","122"],"import React, { Component } from 'react';\r\nimport {NavLink, withRouter } from 'react-router-dom';\r\nimport Navbar from '../Home/Navbar.js';\r\nimport axios from 'axios';\r\nimport homeImg from '../home-pic.png';\r\n\r\n// home page\r\nclass Home extends Component {\r\n\r\n  componentDidMount(){\r\n    // redirects to dashboard if logged in\r\n    axios.get('/authtest')\r\n    .then((result)=>{\r\n      if (result.data) {\r\n        this.props.history.push(\"/dashboard\");\r\n      }\r\n    })\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <div className=\"home-container\">\r\n        <Navbar isAuth={false} />\r\n        <div className=\"home\">\r\n          <div className=\"home-color-panel\"></div>\r\n          <div className=\"home-text-div\">\r\n            <div>\r\n              <h1>Doodle Forms</h1>\r\n              <p>Sign Up today and start creating your Forms!</p>\r\n              <NavLink to=\"/signup\" className=\"home-btns\">Sign Up</NavLink>\r\n              <NavLink to=\"/login\" className=\"home-btns\">Login</NavLink>\r\n            </div>\r\n            <img src={homeImg} />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\auth\\Login.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\auth\\Signup.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\Dashboard.js",["123"],"import React, { Component } from 'react';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport {NavLink} from 'react-router-dom';\r\nimport loadingGif from '../loading_gif.gif'\r\nimport Navbar from '../Home/Navbar.js';\r\nimport DashboardListItem from './DashboardListItem';\r\nimport axios from 'axios';\r\n\r\nclass Dashboard extends Component {\r\n\r\n  static contextType = AuthContext;\r\n\r\n  state = {\r\n    dashboard: null,\r\n    listOfForms: null,\r\n    generatedFormList: null,\r\n    displayData: false,\r\n    flashMsg: '',\r\n  }\r\n  componentDidMount(){\r\n    const { checkAuthAndReturnData } = this.context;\r\n\r\n    // checks auth and then gets all the form created by the user if logged in\r\n    checkAuthAndReturnData('AllCreatedForms')\r\n    .then((result)=>{\r\n\r\n      this.setState({\r\n        listOfForms: result,\r\n        displayData: true,\r\n\r\n      }, ()=>{this.generateFormList()})\r\n    })\r\n    .catch((err)=>{\r\n      console.log(\"Error: \" + err);\r\n    });\r\n  }\r\n\r\n  // generates an array of form names and details that the user has created\r\n  generateFormList = ()=>{\r\n    var listOfForms = this.state.listOfForms;\r\n    var generatedFormList = listOfForms.map((form)=>{\r\n      return <DashboardListItem form={form} deleteForm={this.deleteForm} copyLink={this.copyLink} key={form._id} />\r\n    });\r\n    if (generatedFormList.length == 0) {\r\n      generatedFormList = <div className=\"no-forms-to-show-div\">\r\n        <p>No Forms to show yet!<br/>Create one by clicking the button above.</p>\r\n      </div>\r\n    }\r\n    this.setState({\r\n      generatedFormList: generatedFormList\r\n    });\r\n  }\r\n  \r\n  // fades out the flash message e.g. \"link copied\" or \"form deleted\" e.t.c\r\n  hideFlashMsg = ()=>{\r\n    setTimeout(()=>{\r\n      var flashMsg = document.querySelector(\".dashboard-flash-msg\");\r\n      if (flashMsg) {\r\n        flashMsg.style.opacity = 0;\r\n      }\r\n    }, 1000);\r\n    setTimeout(()=>{this.setState({flashMsg: ''})}, 3000);\r\n  }\r\n\r\n  // delets a form by sending a request to the server with that forms id. Server deletes it from the db\r\n  deleteForm = (e) =>{\r\n    axios({\r\n      method: 'post',\r\n      url: '/deleteform',\r\n      data: {\r\n        formID: e.target.id\r\n      }\r\n    })\r\n    .then((response)=>{\r\n      if (response.data) {\r\n        var formList = this.state.listOfForms;\r\n        var newFormList = formList.filter((form)=>{\r\n          return form._id !== e.target.id;\r\n        });\r\n        this.setState({\r\n          listOfForms: newFormList,\r\n          flashMsg: <p className=\"dashboard-flash-msg\">Form Successfully Deleted!</p>\r\n        }, ()=>{\r\n          this.generateFormList();\r\n          this.hideFlashMsg();\r\n        });\r\n\r\n      }else{\r\n        console.log(\"couldn't delete form. Server returned False\")\r\n      }\r\n    })\r\n    .catch(()=>{\r\n      console.log(\"couldn't delete form. In catch method of /deleteform \")\r\n    })\r\n  }\r\n\r\n  // when user clicks on the 'copy link' btn of a form. The invite link copied to clipboard\r\n  copyLink = (e) =>{\r\n    var textToCopy = \"http://localhost:3000/form/\" + e.target.id;\r\n    if (window.getSelection) {window.getSelection().removeAllRanges();}\r\n    else if (document.selection) {document.selection.empty();}\r\n    \r\n    const el = document.createElement('textarea');\r\n    el.value = textToCopy;\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    el.setSelectionRange(0, 99999); /* For mobile devices */\r\n    document.execCommand('copy');\r\n    document.body.removeChild(el);\r\n\r\n    // to show the flach msg the \"link copied\"\r\n    this.setState({\r\n      flashMsg: <p className=\"dashboard-flash-msg\">Link Copied!</p>\r\n    }, this.hideFlashMsg)\r\n  }\r\n\r\n  render(){\r\n    if (this.state.displayData) {\r\n      return (\r\n        <div className=\"dashboard-container\">\r\n          <Navbar isAuth={true} />\r\n          <div className=\"dashboard-header\">\r\n            <h2>Dashboard</h2>\r\n            <NavLink to=\"/create\" className=\"create-new-form-btn\">Create New Form</NavLink>\r\n            <p>Your Forms:</p>\r\n          </div>\r\n          <div className=\"dashboard-list-container\">\r\n            <div className=\"dashboard-list-headings-container\">\r\n              <p className=\"dashboard-list-heading name-heading\">Form Name</p>\r\n              <p className=\"dashboard-list-heading date-heading\">Date</p>\r\n              <p className=\"dashboard-list-heading responses-heading\">Responses</p>\r\n              <p className=\"dashboard-list-heading empty-heading\"></p>\r\n            </div>\r\n            {this.state.generatedFormList}\r\n          </div>\r\n          {this.state.flashMsg}\r\n        </div>\r\n      );\r\n    }else{\r\n      return(\r\n        <img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Dashboard","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Page404.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\CreateForm.js",["124","125"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SingleLine from '../Form-Elements/SingleLine';\r\nimport RadioBtn from '../Form-Elements/RadioBtn';\r\nimport Checkboxes from '../Form-Elements/Checkboxes';\r\nimport Textarea from '../Form-Elements/Textarea';\r\n\r\nimport SingleLineInputDetails from '../Detail-Panels/SingleLineInputDetails';\r\nimport TextareaInputDetails from '../Detail-Panels/TextareaInputDetails';\r\nimport RadioBtnDetailsPanel from '../Detail-Panels/RadioBtnDetailsPanel';\r\nimport CheckboxesDetailsPanel from '../Detail-Panels/CheckboxesDetailsPanel';\r\n\r\nimport Navbar from '../Home/Navbar.js';\r\nimport AddFormElements from './AddFormElements';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport loadingGif from '../loading_gif.gif'\r\n\r\n// this component is used on the 'create form' page. Allows users to add elements and save the form\r\nclass CreateForm extends Component {\r\n\r\n\t// use context\r\n    static contextType = AuthContext;\r\n\r\n\tstate = {\r\n\t\tformName: \"\",\r\n\t\telements: [],\r\n\t\tgeneratedElementsList:[],\r\n\t\tdetailsPanel: null,\r\n\t\terrorToDisplay: '',\r\n\t\tdisplayData: false\r\n    }\r\n\r\n\t// generates a list of form elements from the 'elements' value in state. Then stores the new array in state\r\n\tgenerateElements = () => {\r\n\t\tvar elements = this.state.elements;\r\n\t\tvar generatedElements = [];\r\n\r\n\t\tgeneratedElements = elements.map((element, index)=>{\r\n\t\t\tvar elementType = element.type;\r\n\r\n\t\t\tswitch(elementType) {\r\n\t\t\t\tcase \"Single-line\":\r\n\t\t\t\t\treturn <SingleLine question={element.question} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Textarea\":\r\n\t\t\t\t\treturn <Textarea question={element.question} maxlength={element.maxlength} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Radio\":\r\n\t\t\t\t\treturn <RadioBtn question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Checkboxes\":\r\n\t\t\t\t\treturn <Checkboxes question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tgeneratedElementsList: generatedElements\r\n\t\t});\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\t// checking whether user logged in. Only sets 'displayData' to 'true' when logged in.\r\n\t\tconst { checkAuthAndReturnData } = this.context;\r\n        checkAuthAndReturnData().then(()=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplayData: true\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\t// adds new elements and stores in the state\r\n\taddElement = (element) => {\r\n\t\tvar updatedElementsList = [...this.state.elements, element]\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList,\r\n\t\t\terrorToDisplay: ''\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\t// updates a particular element in the 'elements' array in state\r\n\tupdateElement = (element, index) => {\r\n\t\tvar updatedElementsList = [...this.state.elements];\r\n\t\tupdatedElementsList[index] = element;\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\t// to save the newly created form\r\n\tsaveForm = () => {\r\n\r\n\t\t// only saves if the form name is not empty and there is atleast one element added\r\n\t\tif (this.state.formName && !this.state.formName.replace(/\\s/g,\"\") == \"\" && this.state.elements.length !== 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: ''\r\n\t\t\t});\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: '/saveform',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tformName: this.state.formName,\r\n\t\t\t\t\tformElements: this.state.elements,\r\n\t\t\t\t\ttime: Math.floor((new Date()).getTime() / 1000),\r\n\t\t\t\t\tnumOfResponses: 0 \r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tvar redirectTo = \"/edit/\" + response.data.formID;\r\n\t\t\t\tthis.props.history.push( redirectTo );\r\n\t\t\t})\r\n\t\t\t.catch((response) => {\r\n\t\t\t\tconsole.log(\"could not send data to /saveform\");\r\n\t\t\t})\r\n\t\t\t\r\n\t\t}else if(this.state.elements.length == 0){\r\n\t\t\t// if no element added\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please add at least one form Element</p>\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\t// if no form name entered\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please Enter a Name for the Form</p>\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// shows the details panel again to edit the element\r\n\teditElement = (e) =>{\r\n\t\t// will show the elements previous details in the details panel which the user can then edit\r\n\t\tvar elementToEdit = this.state.elements[e.target.id];\r\n\t\tvar theDetailsPanel;\r\n\r\n\t\t// showing the appropriate details element\r\n\t\tswitch(elementToEdit.type) {\r\n\t\t\tcase \"Single-line\":\r\n\t\t\t\ttheDetailsPanel = <SingleLineInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"Textarea\":\r\n\t\t\t\ttheDetailsPanel = <TextareaInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Radio\":\r\n\t\t\t\ttheDetailsPanel = <RadioBtnDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Checkboxes\":\r\n\t\t\t\ttheDetailsPanel = <CheckboxesDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: theDetailsPanel\r\n\t\t})\r\n\t}\r\n\r\n\t// hides the details panel in which the user types the details of the element that is to be added\r\n\tcloseDetailsPanel = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: null\r\n\t\t})\r\n\t}\r\n\r\n\t// delets an element from the form by removing it from the 'elements' array in state\r\n\tdeleteElement = (e) => {\r\n\t\tvar elementsToUpdate = this.state.elements;\r\n\r\n\t\telementsToUpdate.splice(e.target.id, 1);\r\n\t\tthis.setState({\r\n\t\t\telements: elementsToUpdate\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.displayData){\r\n\t\t\treturn (\r\n\t\t\t<div className=\"theForm create-form\">\r\n\t\t\t    <Navbar isAuth={true} />\r\n\t\t\t\t<h2 className=\"create-form-heading\">Create Form</h2>\r\n\t\t\t\t<div className=\"form-name-container\">\r\n\t\t\t\t\t<label>Name of Form: </label>\r\n\t\t\t\t\t<input className=\"formName-input\" onChange={(e)=>{this.setState({formName: e.target.value})}} type=\"text\" name=\"form-name\" placeholder=\"Name of Form\" autoComplete=\"off\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t{ this.state.generatedElementsList }\r\n\t\t\t\t{ this.state.detailsPanel }\r\n\t\t\t\t<AddFormElements addElement={(element)=> this.addElement(element)}/>\t\t\t\t\r\n\t\t\t\t{ this.state.errorToDisplay }\r\n\t\t\t\t<button onClick={this.saveForm} className=\"end-of-form-btn\">Create</button>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t\t<img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default CreateForm;","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\EditableForm.js",["126","127","128"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SingleLine from '../Form-Elements/SingleLine';\r\nimport RadioBtn from '../Form-Elements/RadioBtn';\r\nimport Checkboxes from '../Form-Elements/Checkboxes';\r\nimport Textarea from '../Form-Elements/Textarea';\r\n\r\nimport SingleLineInputDetails from '../Detail-Panels/SingleLineInputDetails';\r\nimport TextareaInputDetails from '../Detail-Panels/TextareaInputDetails';\r\nimport RadioBtnDetailsPanel from '../Detail-Panels/RadioBtnDetailsPanel';\r\nimport CheckboxesDetailsPanel from '../Detail-Panels/CheckboxesDetailsPanel';\r\n\r\nimport Navbar from '../Home/Navbar.js';\r\nimport AddFormElements from './AddFormElements';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport loadingGif from '../loading_gif.gif'\r\n\r\n// this component is used when user wants to edit the form after it has already created it.\r\n// most of the methods are the same as in the CreateForm component so refer to it.\r\nclass EditableForm extends Component {\r\n\r\n\tstatic contextType = AuthContext;\r\n\r\n\tstate = {\r\n\t\tformName: \"\",\r\n\t\telements: [],\r\n\t\tgeneratedElementsList:[],\r\n\t\tdetailsPanel: null,\r\n\t\terrorToDisplay: '',\r\n\t\ttime: '',\r\n\t\tdisplayData: false,\r\n\t\tflashMsg: ''\r\n\t}\r\n\r\n\tgenerateElements = () => {\r\n\t\tvar elements = this.state.elements;\r\n\t\tvar generatedElements = [];\r\n\r\n\t\tgeneratedElements = elements.map((element, index)=>{\r\n\t\t\tvar elementType = element.type;\r\n\r\n\t\t\tswitch(elementType) {\r\n\t\t\t\tcase \"Single-line\":\r\n\t\t\t\t\treturn <SingleLine question={element.question} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Textarea\":\r\n\t\t\t\t\treturn <Textarea question={element.question} maxlength={element.maxlength} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Radio\":\r\n\t\t\t\t\treturn <RadioBtn question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Checkboxes\":\r\n\t\t\t\t\treturn <Checkboxes question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tgeneratedElementsList: generatedElements\r\n\t\t});\r\n\t}\r\n\t\r\n\tconvertUnix = (unixTime) =>{\r\n        // Unixtimestamp\r\n        var unixtimestamp = unixTime;\r\n\r\n        // Months array\r\n        var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n\r\n        // Convert timestamp to milliseconds\r\n        var date = new Date(unixtimestamp*1000);\r\n\r\n        // Year\r\n        var year = date.getFullYear();\r\n\r\n        // Month\r\n        var month = months_arr[date.getMonth()];\r\n\r\n        // Day\r\n        var day = date.getDate();\r\n\r\n        // Hours\r\n        var hours = date.getHours();\r\n\r\n        // Minutes\r\n        var minutes = \"0\" + date.getMinutes();\r\n\r\n        // Seconds\r\n        var seconds = \"0\" + date.getSeconds();\r\n\r\n        // Display date time in MM-dd-yyyy h:m:s format\r\n        // var convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n        var convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2);\r\n        \r\n        // return convdataTime;\r\n        return convdataTime\r\n        \r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\r\n\t\tconst { checkAuthAndReturnData } = this.context;\r\n\r\n\t\t// if form id has wrong format\r\n\t\tif (window.location.pathname.substr(6).length !== 24) {\r\n\t\t\tthis.props.history.push(\"/pagenotfound\");\r\n\t\t}\r\n\t\t\r\n\t\t// checks auth and returns the single form requested for\r\n\t\tcheckAuthAndReturnData('SingleForm', window.location.pathname.substr(6))\r\n\t\t.then((result)=>{\r\n\r\n\t\t\tvar convertedTime = this.convertUnix(result.time);\r\n\t\t\tthis.setState({\r\n\t\t\t\tformName: result.formName,\r\n\t\t\t\telements: result.formElements,\r\n\t\t\t\ttime: convertedTime,\r\n\t\t\t\tdisplayData: true\r\n\t\t\t}, ()=>{this.generateElements()})\r\n\t\t})\r\n\t\t.catch((response) => {\r\n\t\t\tconsole.log(\"could not get form from /getform\")\r\n\t\t})\r\n\t}\r\n\r\n\taddElement = (element) => {\r\n\t\tvar updatedElementsList = [...this.state.elements, element]\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList,\r\n\t\t\terrorToDisplay: ''\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\tupdateElement = (element, index) => {\r\n\t\tvar updatedElementsList = [...this.state.elements];\r\n\t\tupdatedElementsList[index] = element;\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\t// this method sends a request to the server to overwrite the old form and save the updated form\r\n\tupdateForm = () => {\r\n\t\tif (this.state.formName && !this.state.formName.replace(/\\s/g,\"\") == \"\" && this.state.elements.length !== 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: ''\r\n\t\t\t})\t\t\t\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: '/updateform',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tformID: window.location.pathname.substr(6),\r\n\t\t\t\t\tformElements: this.state.elements,\r\n\t\t\t\t\tformName: this.state.formName\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then( (response)=> {\r\n\t\t\t\tif(response.data){\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tflashMsg: <p className=\"dashboard-flash-msg\">Form Updated</p>\r\n\t\t\t\t\t}, this.hideFlashMsg)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tflashMsg: <p className=\"dashboard-flash-msg\">Could NOT Update Form!</p>\r\n\t\t\t\t\t}, this.hideFlashMsg)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch( (response)=> {\r\n\t\t\t\tconsole.log(\"could not send data\")\r\n\t\t\t})\r\n\t\t}else if(this.state.elements.length == 0){\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please add at least one Form Element</p>\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please Enter a Name for the Form</p>\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t\r\n\teditElement = (e) =>{\r\n\t\tvar elementToEdit = this.state.elements[e.target.id];\r\n\t\tvar theDetailsPanel;\r\n\t\tswitch(elementToEdit.type) {\r\n\t\t\tcase \"Single-line\":\r\n\t\t\t\ttheDetailsPanel = <SingleLineInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"Textarea\":\r\n\t\t\t\ttheDetailsPanel = <TextareaInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Radio\":\r\n\t\t\t\ttheDetailsPanel = <RadioBtnDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Checkboxes\":\r\n\t\t\t\ttheDetailsPanel = <CheckboxesDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: theDetailsPanel\r\n\t\t})\r\n\t}\r\n\r\n\tcloseDetailsPanel = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: null\r\n\t\t})\r\n\t}\r\n\r\n\tdeleteElement = (e) => {\r\n\t\tvar elementsToUpdate = this.state.elements;\r\n\r\n\t\telementsToUpdate.splice(e.target.id, 1);\r\n\t\tthis.setState({\r\n\t\t\telements: elementsToUpdate\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\thideFlashMsg = ()=>{\r\n\t\tsetTimeout(()=>{\r\n\t\t  var flashMsg = document.querySelector(\".dashboard-flash-msg\");\r\n\t\t  if (flashMsg) {\r\n\t\t\tflashMsg.style.opacity = 0;\r\n\t\t  }\r\n\t\t}, 1000);\r\n\t\tsetTimeout(()=>{this.setState({flashMsg: ''})}, 3000);\r\n\t}\r\n\r\n\tcopyLink = (e) =>{\r\n\t\tvar formId = window.location.pathname.substr(6)\r\n\t\tvar textToCopy = \"http://localhost:3000/form/\" + formId;\r\n\t\tif (window.getSelection) {window.getSelection().removeAllRanges();}\r\n\t\telse if (document.selection) {document.selection.empty();}\r\n\t\t\r\n\t\tconst el = document.createElement('textarea');\r\n\t\tel.value = textToCopy;\r\n\t\tdocument.body.appendChild(el);\r\n\t\tel.select();\r\n\t\tel.setSelectionRange(0, 99999); /* For mobile devices */\r\n\t\tdocument.execCommand('copy');\r\n\t\tdocument.body.removeChild(el);\r\n\t\r\n\t\tthis.setState({\r\n\t\t  flashMsg: <p className=\"dashboard-flash-msg\">Link Copied!</p>\r\n\t\t}, this.hideFlashMsg\r\n\t  )\r\n\t\r\n\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.displayData) {\r\n\t\t\treturn (\r\n\t\t\t<div className=\"theForm editable-form\">\r\n\t\t\t    <Navbar isAuth={true} />\r\n\t\t\t\t<h2 className=\"editable-form-heading\">Edit Form</h2>\r\n\t\t\t\t<div className=\"edit-form-header\">\r\n\t\t\t\t\t<p>Created On: {this.state.time}</p>\r\n                    <button className=\"dashboard-editing-btns\" onClick={this.copyLink}>Copy Link</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.state.flashMsg}\r\n\t\t\t\t<div className=\"form-name-container\">\r\n\t\t\t\t\t<label>Name of Form: </label>\r\n\t\t\t\t\t<input className=\"formName-input\" value={this.state.formName} onChange={(e)=>{e.preventDefault(); this.setState({formName: e.target.value})}} type=\"text\" name=\"formName\" autoComplete=\"off\" />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{ this.state.generatedElementsList }\r\n\t\t\t\t{ this.state.detailsPanel }\r\n\t\t\t\t<AddFormElements addElement={(element)=> this.addElement(element)}/>\r\n\t\t\t\t{ this.state.errorToDisplay }\r\n\t\t\t\t<button onClick={this.updateForm} className=\"end-of-form-btn\">Update</button>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default EditableForm;","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\SubmissionStatus.js",["129"],"import React from 'react';\r\nimport * as QueryString from \"query-string\"\r\n\r\nconst SubmissionStatus = (props) => {\r\n\r\n  const params = QueryString.parse(props.location.search);\r\n\r\n  // if submission success\r\n  if (params.result == 'true') {\r\n    return (\r\n        <div className=\"submission-status-container\">\r\n            <h4>Thank You for your Response!</h4>\r\n            <p>Create your own forms at Doodle Forms today!</p>\r\n            <button className=\"submission-status-button\" onClick={()=>{props.history.push('/create')}}>Create Form</button>\r\n        </div>\r\n    );\r\n\r\n  }else{\r\n    // if submission failed\r\n    return (\r\n      <div className=\"submission-status-container\">\r\n          <h4>Oh no!</h4>\r\n          <p>An Error Occured while submitting your form.</p>\r\n          <button className=\"submission-status-button\" onClick={props.history.goBack} >Back to Form</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmissionStatus","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Context\\AuthContext.js",["130"],"import React, { Component, createContext } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n  state = {\r\n    isLoggedIn: false\r\n  }\r\n\r\n  // checks whether user is authenticated or not. If logged in, then returns the requested data e.g. \"all forms\" or a single form \r\n  checkAuthAndReturnData = (requiredData, formID = null) => {\r\n    return new Promise((resolve, reject)=>{\r\n      axios({\r\n        method: 'post',\r\n        url: '/authtest',\r\n        data: {\r\n          requiredData:  requiredData,\r\n          formID: formID\r\n        }\r\n      })\r\n      .then((response) => {\r\n          // handle success\r\n          var result = response.data;\r\n          if (result == \"Wrong Form ID\") {\r\n            this.props.history.push(\"/pagenotfound\");\r\n          }else if (!result) {\r\n            // If not authenticated\r\n            this.props.history.push(\"/login\");\r\n            reject(false);\r\n          }else{\r\n            // If authenticated\r\n            this.setState({\r\n              isLoggedIn: true\r\n            }, ()=>{\r\n              resolve(result);\r\n            });\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          // handle error\r\n          this.props.history.push(\"/Login\");\r\n          reject(false);\r\n      })\r\n    });\r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      // To make the context available to all the components\r\n      <AuthContext.Provider value={{ checkAuthAndReturnData: this.checkAuthAndReturnData, isLoggedIn: this.state.isLoggedIn}}>\r\n        {this.props.children}\r\n      </AuthContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AuthContextProvider);","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\Responses.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\FormToFill.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Home\\Navbar.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\DashboardListItem.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Dashboard\\AddFormElements.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Responses\\SingleResponse.js",["131","132"],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\Checkboxes.js",["133"],"import React from 'react';\r\n\r\n// when a form is displayed, the checkboxes in it are displayed using this component\r\nconst Checkboxes = ({question, values, id, editElement, deleteElement}) => {\r\n\r\n    // shows btns for editing and deleting element. Only visible when user editing or creating the form. Depends on the props(editElement)\r\n    if (editElement) {\r\n        var editButtons = <div className=\"edit-form-btns-container\">\r\n            <button onClick={editElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n            <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n        </div>\r\n    }else{\r\n        var editButtons = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"checkboxes-element form-element\" key={id}>\r\n            <label className=\"form-element-question\">{question}</label>\r\n            {\r\n                values.map((value, index) => {\r\n                    return(\r\n                        <div key={index}>\r\n                            <input className=\"checkbox-element-input\" type=\"checkbox\" name={question} id={`question${id+1}`} value={value} />\r\n                            <label htmlFor={`question${id+1}`}>{value}</label>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {editButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Checkboxes","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\SingleLine.js",["134"],"import React from 'react';\r\n\r\n// when a form is displayed, the single line field in it is displayed using this component\r\nconst SingleLine = ({question, id, editElement, deleteElement}) => {\r\n\r\n  // shows btns for editing and deleting element. Only visible when user editing or creating the form. Depends on the props(editElement)\r\n  if (editElement) {\r\n    var editButtons = <div className=\"edit-form-btns-container\">\r\n      <button onClick={editElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n      <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n    </div>\r\n  }else{\r\n    var editButtons = null;\r\n  }\r\n  return (\r\n    <div className=\"single-line-element form-element\" key={id} id={id}>\r\n        <label htmlFor={`question${id+1}`} className=\"form-element-question\">{question}</label>\r\n        <input className=\"oneline-element-input\" type=\"text\" name={question} id={`question${id+1}`} autoComplete=\"off\" required/>\r\n        {editButtons}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleLine","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\RadioBtn.js",["135"],"import React from 'react';\r\n\r\n// when a form is displayed, the radio btns in it are displayed using this component\r\nconst RadioBtn = ({question, values, id, editElement, deleteElement}) => {\r\n\r\n    // shows btns for editing and deleting element. Only visible when user editing or creating the form. Depends on the props(editElement)\r\n    if (editElement) {\r\n        var editButtons = <div className=\"edit-form-btns-container\">\r\n            <button onClick={editElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n            <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n        </div>\r\n    }else{\r\n        var editButtons = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"radio-btn-element form-element\" key={id}>\r\n            <label className=\"form-element-question\">{question}</label>\r\n            {\r\n                values.map((value, index) => {\r\n                    return(\r\n                        <div key={index}>\r\n                            <input className=\"radio-element-input\" type=\"radio\" name={question} id={`question${id+1}`} value={value} required/>\r\n                            <label htmlFor={`question${id+1}`}>{value}</label> \r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {editButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioBtn","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Form-Elements\\Textarea.js",["136","137"],"import React, { Component } from 'react';\r\n\r\n// when a form is displayed, the textarea in it is displayed using this component\r\nclass Textarea extends Component {\r\n\r\n  state = { \r\n    charsTyped: 0\r\n  }\r\n\r\n  componentDidMount(){\r\n    var textareaId = `#question${this.props.id+1}`;\r\n    var textareaValueLength = document.querySelector(textareaId).value.length;\r\n    this.setState({\r\n      charsTyped: textareaValueLength\r\n    })\r\n  }\r\n\r\n  // keeps note of the number of characters typed and displays it below the textarea\r\n  handleTyping = (e)=>{\r\n    var charsTyped = e.target.value.length;\r\n    this.setState({\r\n      charsTyped: charsTyped\r\n    })\r\n  }\r\n\r\n  render() { \r\n    const {question, maxlength, id, editElement, deleteElement} = this.props;\r\n\r\n    // shows btns for editing and deleting element. Only visible when user editing or creating the form. Depends on the props(editElement)\r\n    if (editElement) {\r\n      var editButtons = <div className=\"edit-form-btns-container\">\r\n        <button onClick={editElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n        <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i className=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n      </div>\r\n    }else{\r\n      var editButtons = null;\r\n    }\r\n\r\n    if (this.props.maxlength && this.props.maxlength>=0) {\r\n      var charLimitDisplay = <p className=\"char-limit-textarea\">{this.state.charsTyped}/{this.props.maxlength}</p>\r\n    }else{\r\n      var charLimitDisplay = null;\r\n    }\r\n    return (\r\n      <div className=\"text-area-element form-element\" key={id}>\r\n          <label htmlFor={`question${id+1}`} className=\"form-element-question\">{question}</label>\r\n          <textarea onChange={this.handleTyping} className=\"textarea-element-input\" name={question} id={`question${id+1}`} rows=\"10\" cols=\"30\" maxLength={maxlength} required></textarea>\r\n          {editButtons}\r\n          {charLimitDisplay}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Textarea;","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\TextareaInputDetails.js",["138"],"import React, { Component } from 'react';\r\n\r\n// this is displayed when the user wishes to add a 'textarea' field in the form\r\nclass TextareaInputDetails extends Component {\r\n\r\n  state = {\r\n    question: '',\r\n    maxlength: '',\r\n    action: 'Add',\r\n    emptyFieldError: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    // if default values sent in the props, it means user wishes to update an element\r\n    if (this.props.defaultValues) {\r\n\r\n      this.setState({\r\n        question: this.props.defaultValues.question,\r\n        maxlength: this.props.defaultValues.maxlength,\r\n        action: 'Done'\r\n      })\r\n    }\r\n  }\r\n  // sends back the newly created form element using the \"sendElement\" function passed down through props\r\n  createElement = (e) => {\r\n    e.preventDefault();\r\n    \r\n    var element = {\r\n      type: \"Textarea\",\r\n      question: this.state.question,\r\n      maxlength: this.state.maxlength,\r\n    }\r\n    if(element.question && !element.question.replace(/\\s/g,\"\") == \"\"){\r\n      this.setState({\r\n        emptyFieldError: ''\r\n      });\r\n      this.props.sendElement(element, e.target.id);\r\n      this.props.closeDetailsPanel(e);\r\n    }else{\r\n      this.setState({\r\n        emptyFieldError: 'Please enter a question'\r\n      })\r\n      \r\n    }\r\n  }\r\n  \r\n  // state updated whenever user types in the 'question' field for the creation of a new element\r\n  handleQuestion = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"detailsPanel textarea-input-details\">\r\n          <form className=\"detailsForm\">\r\n              <h2 className=\"details-panel-heading\">Add a Textarea</h2>\r\n              <input type=\"text\" id=\"question\" placeholder=\"Enter the Question\" value={this.state.question} onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <input type=\"number\" id=\"maxlength\" placeholder=\"Character Limit (Optional)\" value={this.state.maxlength} onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <p className=\"empty-field-error\" >{this.state.emptyFieldError}</p>\r\n              <div className=\"details-panel-btns\">\r\n                <button onClick={this.createElement} id={this.props.elementIndex}>{this.state.action}</button>\r\n                <button onClick={this.props.closeDetailsPanel}>Cancel</button>\r\n              </div>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextareaInputDetails","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\SingleLineInputDetails.js",["139"],"import React, { Component } from 'react';\r\n\r\n// this is displayed when the user wishes to add a 'single line' field in the form\r\nclass SingleLineInputDetails extends Component {\r\n\r\n  state = {\r\n    question: '',\r\n    action: 'Add',\r\n    emptyFieldError: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    // if default values sent in the props, it means user wishes to update an element\r\n    if (this.props.defaultValues) {\r\n\r\n      this.setState({\r\n        question: this.props.defaultValues.question,\r\n        action: 'Done'\r\n      })\r\n    }\r\n  }\r\n\r\n  // sends back the newly created form element using the \"sendElement\" function passed down through props\r\n  createElement = (e) => {\r\n    e.preventDefault();\r\n    \r\n    var element = {\r\n      type: \"Single-line\",\r\n      question: this.state.question,\r\n    }\r\n    // makes sure that some detail has been entered about the element\r\n    if(element.question && !element.question.replace(/\\s/g,\"\") == \"\"){\r\n      this.setState({\r\n        emptyFieldError: ''\r\n      });\r\n      this.props.sendElement(element, e.target.id);\r\n      this.props.closeDetailsPanel(e);\r\n    }else{\r\n      this.setState({\r\n        emptyFieldError: 'Please enter a question'\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  // state updated whenever user types in the 'question' field for the creation of a new element\r\n  handleQuestion = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"detailsPanel single-line-input-details\">\r\n          <form className=\"detailsForm\" onSubmit={(e)=>{e.preventDefault()}}>\r\n              <h2 className=\"details-panel-heading\">Add a Single line Field</h2>\r\n              <input type=\"text\" id=\"question\" value={this.state.question} placeholder=\"Enter the Question\" onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <p className=\"empty-field-error\" >{this.state.emptyFieldError}</p>\r\n              <div className=\"details-panel-btns\">\r\n                <button onClick={this.createElement} id={this.props.elementIndex} >{this.state.action}</button>\r\n                <button onClick={this.props.closeDetailsPanel}>Cancel</button>\r\n              </div>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleLineInputDetails","D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\CheckboxesDetailsPanel.js",[],"D:\\Programming\\Code\\Projects\\Doodle-Forms - Copy\\doodle-forms\\src\\Detail-Panels\\RadioBtnDetailsPanel.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":2,"column":18,"nodeType":"146","messageId":"147","endLine":2,"endColumn":28},{"ruleId":"148","severity":1,"message":"149","line":33,"column":13,"nodeType":"150","endLine":33,"endColumn":34},{"ruleId":"151","severity":1,"message":"152","line":44,"column":34,"nodeType":"153","messageId":"154","endLine":44,"endColumn":36},{"ruleId":"151","severity":1,"message":"152","line":104,"column":69,"nodeType":"153","messageId":"154","endLine":104,"endColumn":71},{"ruleId":"151","severity":1,"message":"152","line":126,"column":39,"nodeType":"153","messageId":"154","endLine":126,"endColumn":41},{"ruleId":"144","severity":1,"message":"155","line":93,"column":13,"nodeType":"146","messageId":"147","endLine":93,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":155,"column":69,"nodeType":"153","messageId":"154","endLine":155,"endColumn":71},{"ruleId":"151","severity":1,"message":"152","line":182,"column":39,"nodeType":"153","messageId":"154","endLine":182,"endColumn":41},{"ruleId":"151","severity":1,"message":"152","line":9,"column":21,"nodeType":"153","messageId":"154","endLine":9,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":26,"column":22,"nodeType":"153","messageId":"154","endLine":26,"endColumn":24},{"ruleId":"156","severity":1,"message":"157","line":10,"column":44,"nodeType":"158","messageId":"159","endLine":13,"endColumn":18},{"ruleId":"160","severity":1,"message":"161","line":23,"column":21,"nodeType":"146","messageId":"162","endLine":23,"endColumn":29},{"ruleId":"160","severity":1,"message":"163","line":13,"column":13,"nodeType":"146","messageId":"162","endLine":13,"endColumn":24},{"ruleId":"160","severity":1,"message":"163","line":13,"column":9,"nodeType":"146","messageId":"162","endLine":13,"endColumn":20},{"ruleId":"160","severity":1,"message":"163","line":13,"column":13,"nodeType":"146","messageId":"162","endLine":13,"endColumn":24},{"ruleId":"160","severity":1,"message":"163","line":36,"column":11,"nodeType":"146","messageId":"162","endLine":36,"endColumn":22},{"ruleId":"160","severity":1,"message":"164","line":42,"column":11,"nodeType":"146","messageId":"162","endLine":42,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":33,"column":64,"nodeType":"153","messageId":"154","endLine":33,"endColumn":66},{"ruleId":"151","severity":1,"message":"152","line":32,"column":64,"nodeType":"153","messageId":"154","endLine":32,"endColumn":66},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'seconds' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'checkboxAnswers'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'toAppend' is already defined.","redeclared","'editButtons' is already defined.","'charLimitDisplay' is already defined.","no-global-assign","no-unsafe-negation"]