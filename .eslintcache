[{"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\index.js":"1","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\reportWebVitals.js":"2","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\App.js":"3","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Home.js":"4","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\Dashboard.js":"5","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Navbar.js":"6","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Signup.js":"7","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Login.js":"8","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\EditableForm.js":"9","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\CreateForm.js":"10","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Context\\AuthContext.js":"11","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\Responses.js":"12","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\FormToFill.js":"13","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\AddFormElements.js":"14","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\SingleLineInputDetails.js":"15","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\TextareaInputDetails.js":"16","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\CheckboxesDetailsPanel.js":"17","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\RadioBtnDetailsPanel.js":"18","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Checkboxes.js":"19","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\RadioBtn.js":"20","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Textarea.js":"21","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\SingleLine.js":"22","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SingleResponse.js":"23","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SubmissionStatus.js":"24","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Page404.js":"25","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\DashboardListItem.js":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":1674,"mtime":1609298917052,"results":"30","hashOfConfig":"28"},{"size":1126,"mtime":1611038293752,"results":"31","hashOfConfig":"28"},{"size":4586,"mtime":1609948623790,"results":"32","hashOfConfig":"28"},{"size":3031,"mtime":1609944403725,"results":"33","hashOfConfig":"28"},{"size":3549,"mtime":1609911364623,"results":"34","hashOfConfig":"28"},{"size":3486,"mtime":1609911358711,"results":"35","hashOfConfig":"28"},{"size":10332,"mtime":1609948748663,"results":"36","hashOfConfig":"28"},{"size":7122,"mtime":1609945256194,"results":"37","hashOfConfig":"28"},{"size":1895,"mtime":1609255933791,"results":"38","hashOfConfig":"28"},{"size":2475,"mtime":1609837551491,"results":"39","hashOfConfig":"28"},{"size":3239,"mtime":1609333254401,"results":"40","hashOfConfig":"28"},{"size":2967,"mtime":1609312542873,"results":"41","hashOfConfig":"28"},{"size":2136,"mtime":1609426006871,"results":"42","hashOfConfig":"28"},{"size":2282,"mtime":1609508701349,"results":"43","hashOfConfig":"28"},{"size":4847,"mtime":1609426138917,"results":"44","hashOfConfig":"28"},{"size":5005,"mtime":1609426133110,"results":"45","hashOfConfig":"28"},{"size":1370,"mtime":1609319484648,"results":"46","hashOfConfig":"28"},{"size":1368,"mtime":1609319351624,"results":"47","hashOfConfig":"28"},{"size":1850,"mtime":1609509046499,"results":"48","hashOfConfig":"28"},{"size":1020,"mtime":1609315156784,"results":"49","hashOfConfig":"28"},{"size":1450,"mtime":1609833837399,"results":"50","hashOfConfig":"28"},{"size":1233,"mtime":1609911336354,"results":"51","hashOfConfig":"28"},{"size":370,"mtime":1609949525575,"results":"52","hashOfConfig":"28"},{"size":2582,"mtime":1609909179629,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"od9s71",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\index.js",[],["120","121"],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\reportWebVitals.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\App.js",["122"],"import React, { Component } from 'react';\nimport CreateForm from './Dashboard/CreateForm';\nimport EditableForm from './Dashboard/EditableForm';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from './Home/Navbar.js';\nimport Home from './Home/Home.js';\nimport Signup from './auth/Signup.js';\nimport Login from './auth/Login.js';\nimport Dashboard from './Dashboard/Dashboard.js';\nimport AuthContextProvider from './Context/AuthContext';\nimport Responses from './Responses/Responses';\nimport FormToFill from './Responses/FormToFill';\nimport Page404 from './Page404'\nimport SubmissionStatus from './Responses/SubmissionStatus'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <AuthContextProvider>\n          <div className=\"App\">\n            {/* <Navbar isAuth={true} /> */}\n            <Switch>\n              <Route exact path='/' component={Home} />\n              <Route exact path='/signup' component={Signup} />\n              <Route exact path='/login' component={Login} />\n              <Route exact path='/Dashboard' component={Dashboard} />\n              <Route exact path='/create' component={CreateForm} />\n              <Route exact path='/edit/:form_id' component={EditableForm} />\n              <Route exact path='/responses/:form_id' component={Responses} />\n              <Route exact path='/form/:form_id' component={FormToFill} />\n              <Route exact path='/formsubmission' component={SubmissionStatus} />\n              <Route path=\"*\" component={Page404} />\n            </Switch>\n          </div>\n        </AuthContextProvider>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Home.js",["123","124"],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\Dashboard.js",["125"],"import React, { Component } from 'react';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport {NavLink} from 'react-router-dom';\r\nimport loadingGif from '../loading_gif.gif'\r\nimport Navbar from '../Home/Navbar.js';\r\nimport DashboardListItem from './DashboardListItem';\r\nimport axios from 'axios';\r\n\r\nclass Dashboard extends Component {\r\n\r\n  static contextType = AuthContext;\r\n\r\n  state = {\r\n    dashboard: null,\r\n    listOfForms: null,\r\n    generatedFormList: null,\r\n    displayData: false,\r\n    flashMsg: '',\r\n  }\r\n  componentDidMount(){\r\n    const { checkAuthAndReturnData } = this.context;\r\n\r\n    checkAuthAndReturnData('AllCreatedForms')\r\n    .then((result)=>{\r\n      console.log(\"Logged In. Data Returned:\")\r\n      console.log(result);\r\n      this.setState({\r\n        listOfForms: result,\r\n        displayData: true,\r\n\r\n      }, ()=>{this.generateFormList()})\r\n    })\r\n    .catch((err)=>{\r\n      console.log(\"Error: \" + err);\r\n    });\r\n  }\r\n\r\n  generateFormList = ()=>{\r\n    var listOfForms = this.state.listOfForms;\r\n    var generatedFormList = listOfForms.map((form)=>{\r\n      console.log(form);\r\n      return <DashboardListItem form={form} deleteForm={this.deleteForm} copyLink={this.copyLink} key={form._id} />\r\n    });\r\n    if (generatedFormList.length == 0) {\r\n      console.log(\"No forms created yet!\");\r\n      generatedFormList = <div className=\"no-forms-to-show-div\">\r\n        <p>No Forms to show yet!<br/>Create one by clicking the button above.</p>\r\n      </div>\r\n    }\r\n    this.setState({\r\n      generatedFormList: generatedFormList\r\n    });\r\n  }\r\n  \r\n  hideFlashMsg = ()=>{\r\n    setTimeout(()=>{\r\n      var flashMsg = document.querySelector(\".dashboard-flash-msg\");\r\n      if (flashMsg) {\r\n        flashMsg.style.opacity = 0;\r\n      }\r\n      console.log(\"fading flash msg\");\r\n    }, 1000);\r\n    setTimeout(()=>{this.setState({flashMsg: ''})}, 3000);\r\n  }\r\n\r\n  deleteForm = (e) =>{\r\n    console.log(\"delete the form: \" + e.target.id);\r\n    axios({\r\n      method: 'post',\r\n      url: '/deleteform',\r\n      data: {\r\n        formID: e.target.id\r\n      }\r\n    })\r\n    .then((response)=>{\r\n      if (response.data) {\r\n        console.log(\"Form has been deleted\");\r\n        var formList = this.state.listOfForms;\r\n        var newFormList = formList.filter((form)=>{\r\n          return form._id !== e.target.id;\r\n        });\r\n        this.setState({\r\n          listOfForms: newFormList,\r\n          flashMsg: <p className=\"dashboard-flash-msg\">Form Successfully Deleted!</p>\r\n        }, ()=>{\r\n          this.generateFormList();\r\n          this.hideFlashMsg();\r\n        });\r\n\r\n      }else{\r\n        console.log(\"couldn't delete form. Server returned False\")\r\n      }\r\n    })\r\n    .catch(()=>{\r\n      console.log(\"couldn't delete form. In catch method of /deleteform \")\r\n    })\r\n  }\r\n\r\n  copyLink = (e) =>{\r\n    console.log(\"copy link for form: \" + e.target.id);\r\n    var textToCopy = \"http://localhost:3000/form/\" + e.target.id;\r\n    if (window.getSelection) {window.getSelection().removeAllRanges();}\r\n    else if (document.selection) {document.selection.empty();}\r\n    \r\n    const el = document.createElement('textarea');\r\n    el.value = textToCopy;\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    el.setSelectionRange(0, 99999); /* For mobile devices */\r\n    document.execCommand('copy');\r\n    document.body.removeChild(el);\r\n\r\n    this.setState({\r\n      flashMsg: <p className=\"dashboard-flash-msg\">Link Copied!</p>\r\n    }, this.hideFlashMsg\r\n  )\r\n\r\n\r\n  }\r\n\r\n  render(){\r\n    if (this.state.displayData) {\r\n      return (\r\n        <div className=\"dashboard-container\">\r\n          <Navbar isAuth={true} />\r\n          <div className=\"dashboard-header\">\r\n            <h2>Dashboard</h2>\r\n            <NavLink to=\"/create\" className=\"create-new-form-btn\">Create New Form</NavLink>\r\n            <p>Your Forms:</p>\r\n          </div>\r\n          <div className=\"dashboard-list-container\">\r\n            <div className=\"dashboard-list-headings-container\">\r\n              <p className=\"dashboard-list-heading name-heading\">Form Name</p>\r\n              <p className=\"dashboard-list-heading date-heading\">Date</p>\r\n              <p className=\"dashboard-list-heading responses-heading\">Responses</p>\r\n              <p className=\"dashboard-list-heading empty-heading\"></p>\r\n            </div>\r\n            {this.state.generatedFormList}\r\n          </div>\r\n          {this.state.flashMsg}\r\n        </div>\r\n      );\r\n    }else{\r\n      return(\r\n        <img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Dashboard","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Navbar.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Signup.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Login.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\EditableForm.js",["126","127","128"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SingleLine from '../Form-Elements/SingleLine';\r\nimport RadioBtn from '../Form-Elements/RadioBtn';\r\nimport Checkboxes from '../Form-Elements/Checkboxes';\r\nimport Textarea from '../Form-Elements/Textarea';\r\n\r\nimport SingleLineInputDetails from '../Detail-Panels/SingleLineInputDetails';\r\nimport TextareaInputDetails from '../Detail-Panels/TextareaInputDetails';\r\nimport RadioBtnDetailsPanel from '../Detail-Panels/RadioBtnDetailsPanel';\r\nimport CheckboxesDetailsPanel from '../Detail-Panels/CheckboxesDetailsPanel';\r\n\r\nimport Navbar from '../Home/Navbar.js';\r\nimport AddFormElements from './AddFormElements';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport loadingGif from '../loading_gif.gif'\r\n\r\nclass EditableForm extends Component {\r\n\r\n\tstatic contextType = AuthContext;\r\n\r\n\tstate = {\r\n\t\tformName: \"\",\r\n\t\telements: [],\r\n\t\tgeneratedElementsList:[],\r\n\t\tdetailsPanel: null,\r\n\t\terrorToDisplay: '',\r\n\t\ttime: '',\r\n\t\tdisplayData: false,\r\n\t\tflashMsg: ''\r\n\t}\r\n\r\n\tgenerateElements = () => {\r\n\t\tvar elements = this.state.elements;\r\n\t\tvar generatedElements = [];\r\n\r\n\t\tgeneratedElements = elements.map((element, index)=>{\r\n\t\t\tvar elementType = element.type;\r\n\t\t\t// var generatedElement;\r\n\t\t\tswitch(elementType) {\r\n\t\t\t\tcase \"Single-line\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <SingleLine question={element.question} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Textarea\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <Textarea question={element.question} maxlength={element.maxlength} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Radio\":\r\n\t\t\t\t\tconsole.log(\"Its a Radio element\");\r\n\t\t\t\t\treturn <RadioBtn question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Checkboxes\":\r\n\t\t\t\t\tconsole.log(\"Its a Checkbox element\");\r\n\t\t\t\t\treturn <Checkboxes question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tgeneratedElementsList: generatedElements\r\n\t\t});\r\n\t\t// console.log(generatedElements);\r\n\t}\r\n\t\r\n\tconvertUnix = (unixTime) =>{\r\n        // Unixtimestamp\r\n        var unixtimestamp = unixTime;\r\n\r\n        // Months array\r\n        var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n\r\n        // Convert timestamp to milliseconds\r\n        var date = new Date(unixtimestamp*1000);\r\n\r\n        // Year\r\n        var year = date.getFullYear();\r\n\r\n        // Month\r\n        var month = months_arr[date.getMonth()];\r\n\r\n        // Day\r\n        var day = date.getDate();\r\n\r\n        // Hours\r\n        var hours = date.getHours();\r\n\r\n        // Minutes\r\n        var minutes = \"0\" + date.getMinutes();\r\n\r\n        // Seconds\r\n        var seconds = \"0\" + date.getSeconds();\r\n\r\n        // Display date time in MM-dd-yyyy h:m:s format\r\n        // var convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n        var convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2);\r\n        \r\n        // return convdataTime;\r\n        return convdataTime\r\n        \r\n    }\r\n\tcomponentDidMount(){\r\n\r\n\t\tconst { checkAuthAndReturnData } = this.context;\r\n\r\n\t\tif (window.location.pathname.substr(6).length !== 24) {\r\n\t\t\tconsole.log(\"Form length very short\");\r\n\t\t\tthis.props.history.push(\"/pagenotfound\");\r\n\t\t}\r\n\t\t\r\n\t\tcheckAuthAndReturnData('SingleForm', window.location.pathname.substr(6))\r\n\t\t.then((result)=>{\r\n\t\t\tconsole.log(\"Data from server checkAuthAndReturnData() \");\r\n\t\t\tconsole.log(result);\r\n\t\t\tvar convertedTime = this.convertUnix(result.time);\r\n\t\t\tthis.setState({\r\n\t\t\t\tformName: result.formName,\r\n\t\t\t\telements: result.formElements,\r\n\t\t\t\ttime: convertedTime,\r\n\t\t\t\tdisplayData: true\r\n\t\t\t}, ()=>{this.generateElements()})\r\n\t\t})\r\n\t\t.catch((response) => {\r\n\t\t\tconsole.log(\"could not get form from /getform\")\r\n\t\t})\r\n\t}\r\n\r\n\taddElement = (element) => {\r\n\t\tvar updatedElementsList = [...this.state.elements, element]\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList,\r\n\t\t\terrorToDisplay: ''\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\tconsole.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be added\");\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\tupdateElement = (element, index) => {\r\n\t\tvar updatedElementsList = [...this.state.elements];\r\n\t\tupdatedElementsList[index] = element;\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\t// console.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be updated\");\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\tupdateForm = () => {\r\n\t\tif (this.state.formName && !this.state.formName.replace(/\\s/g,\"\") == \"\" && this.state.elements.length !== 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: ''\r\n\t\t\t})\t\t\t\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: '/updateform',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tformID: window.location.pathname.substr(6),\r\n\t\t\t\t\tformElements: this.state.elements,\r\n\t\t\t\t\tformName: this.state.formName\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then( (response)=> {\r\n\t\t\t\tconsole.log(response.data);\r\n\t\t\t\tif(response.data){\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tflashMsg: <p className=\"dashboard-flash-msg\">Form Updated</p>\r\n\t\t\t\t\t}, this.hideFlashMsg)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tflashMsg: <p className=\"dashboard-flash-msg\">Could NOT Update Form!</p>\r\n\t\t\t\t\t}, this.hideFlashMsg)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch( (response)=> {\r\n\t\t\t\tconsole.log(\"could not send data\")\r\n\t\t\t})\r\n\t\t}else if(this.state.elements.length == 0){\r\n\t\t\tconsole.log(\"Name field is empty\")\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please add at least one Form Element</p>\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please Enter a Name for the Form</p>\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t\r\n\teditElement = (e) =>{\r\n\t\tvar elementToEdit = this.state.elements[e.target.id];\r\n\t\tvar theDetailsPanel;\r\n\t\tconsole.log(elementToEdit);\r\n\t\tswitch(elementToEdit.type) {\r\n\t\t\tcase \"Single-line\":\r\n\t\t\t\tconsole.log(\"About to edit a single line element\");\r\n\t\t\t\ttheDetailsPanel = <SingleLineInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"Textarea\":\r\n\t\t\t\tconsole.log(\"Its textarea-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <TextareaInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Radio\":\r\n\t\t\t\tconsole.log(\"Its radio-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <RadioBtnDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Checkboxes\":\r\n\t\t\t\tconsole.log(\"Its checkbox-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <CheckboxesDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: theDetailsPanel\r\n\t\t})\r\n\t}\r\n\r\n\tcloseDetailsPanel = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: null\r\n\t\t})\r\n\t}\r\n\r\n\tdeleteElement = (e) => {\r\n\t\tvar elementsToUpdate = this.state.elements;\r\n\t\tconsole.log(\"delete index: \" + e.target.id)\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\telementsToUpdate.splice(e.target.id, 1);\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\tthis.setState({\r\n\t\t\telements: elementsToUpdate\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\t// hideFlashMsg = ()=>{\r\n\t// \tsetTimeout(()=>{\r\n\t// \t\tdocument.querySelector(\".dashboard-flash-msg\").style.opacity = 0;\r\n\r\n\t// \t}, 1000);\r\n\t// \t\tsetTimeout(()=>{this.setState({flashMsg: ''})}, 3000);\r\n\t// }\r\n\thideFlashMsg = ()=>{\r\n\t\tsetTimeout(()=>{\r\n\t\t  var flashMsg = document.querySelector(\".dashboard-flash-msg\");\r\n\t\t  if (flashMsg) {\r\n\t\t\tflashMsg.style.opacity = 0;\r\n\t\t  }\r\n\t\t  console.log(\"fading flash msg\");\r\n\t\t}, 1000);\r\n\t\tsetTimeout(()=>{this.setState({flashMsg: ''})}, 3000);\r\n\t}\r\n\r\n\tcopyLink = (e) =>{\r\n\t\tvar formId = window.location.pathname.substr(6)\r\n\t\tconsole.log(\"copy link for form: \" + formId);\r\n\t\tvar textToCopy = \"http://localhost:3000/form/\" + formId;\r\n\t\tif (window.getSelection) {window.getSelection().removeAllRanges();}\r\n\t\telse if (document.selection) {document.selection.empty();}\r\n\t\t\r\n\t\tconst el = document.createElement('textarea');\r\n\t\tel.value = textToCopy;\r\n\t\tdocument.body.appendChild(el);\r\n\t\tel.select();\r\n\t\tel.setSelectionRange(0, 99999); /* For mobile devices */\r\n\t\tdocument.execCommand('copy');\r\n\t\tdocument.body.removeChild(el);\r\n\t\r\n\t\tthis.setState({\r\n\t\t  flashMsg: <p className=\"dashboard-flash-msg\">Link Copied!</p>\r\n\t\t}, this.hideFlashMsg\r\n\t  )\r\n\t\r\n\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.displayData) {\r\n\t\t\treturn (\r\n\t\t\t<div className=\"theForm editable-form\">\r\n\t\t\t    <Navbar isAuth={true} />\r\n\t\t\t\t<h2 className=\"editable-form-heading\">Edit Form</h2>\r\n\t\t\t\t<div className=\"edit-form-header\">\r\n\t\t\t\t\t<p>Created On: {this.state.time}</p>\r\n                    <button className=\"dashboard-editing-btns\" onClick={this.copyLink}>Copy Link</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.state.flashMsg}\r\n\t\t\t\t<div className=\"form-name-container\">\r\n\t\t\t\t\t<label>Name of Form: </label>\r\n\t\t\t\t\t<input className=\"formName-input\" value={this.state.formName} onChange={(e)=>{e.preventDefault(); this.setState({formName: e.target.value})}} type=\"text\" name=\"formName\" autoComplete=\"off\" />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{ this.state.generatedElementsList }\r\n\t\t\t\t{ this.state.detailsPanel }\r\n\t\t\t\t<AddFormElements addElement={(element)=> this.addElement(element)}/>\r\n\t\t\t\t{ this.state.errorToDisplay }\r\n\t\t\t\t<button onClick={this.updateForm} className=\"end-of-form-btn\">Update</button>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default EditableForm;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\CreateForm.js",["129","130"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SingleLine from '../Form-Elements/SingleLine';\r\nimport RadioBtn from '../Form-Elements/RadioBtn';\r\nimport Checkboxes from '../Form-Elements/Checkboxes';\r\nimport Textarea from '../Form-Elements/Textarea';\r\n\r\nimport SingleLineInputDetails from '../Detail-Panels/SingleLineInputDetails';\r\nimport TextareaInputDetails from '../Detail-Panels/TextareaInputDetails';\r\nimport RadioBtnDetailsPanel from '../Detail-Panels/RadioBtnDetailsPanel';\r\nimport CheckboxesDetailsPanel from '../Detail-Panels/CheckboxesDetailsPanel';\r\n\r\nimport Navbar from '../Home/Navbar.js';\r\nimport AddFormElements from './AddFormElements';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport loadingGif from '../loading_gif.gif'\r\n\r\nclass CreateForm extends Component {\r\n\r\n    static contextType = AuthContext;\r\n\r\n\tstate = {\r\n\t\tformName: \"\",\r\n\t\telements: [],\r\n\t\tgeneratedElementsList:[],\r\n\t\tdetailsPanel: null,\r\n\t\terrorToDisplay: '',\r\n\t\tdisplayData: false\r\n    }\r\n\r\n\tgenerateElements = () => {\r\n\t\tvar elements = this.state.elements;\r\n\t\tvar generatedElements = [];\r\n\r\n\t\tgeneratedElements = elements.map((element, index)=>{\r\n\t\t\tvar elementType = element.type;\r\n\t\t\t// var generatedElement;\r\n\t\t\tswitch(elementType) {\r\n\t\t\t\tcase \"Single-line\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <SingleLine question={element.question} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Textarea\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <Textarea question={element.question} maxlength={element.maxlength} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Radio\":\r\n\t\t\t\t\tconsole.log(\"Its a Radio element\");\r\n\t\t\t\t\treturn <RadioBtn question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Checkboxes\":\r\n\t\t\t\t\tconsole.log(\"Its a Checkbox element\");\r\n\t\t\t\t\treturn <Checkboxes question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tgeneratedElementsList: generatedElements\r\n\t\t});\r\n\t\t// console.log(generatedElements);\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tconst { checkAuthAndReturnData } = this.context;\r\n        checkAuthAndReturnData().then(()=>{\r\n\t\t\tconsole.log(this.state.elements);\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplayData: true\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\taddElement = (element) => {\r\n\t\tvar updatedElementsList = [...this.state.elements, element]\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList,\r\n\t\t\terrorToDisplay: ''\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\tconsole.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be added\");\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\tupdateElement = (element, index) => {\r\n\t\tvar updatedElementsList = [...this.state.elements];\r\n\t\tupdatedElementsList[index] = element;\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\t// console.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be updated\");\r\n\t\t});\r\n\t}\r\n\r\n\tsaveForm = () => {\r\n\t\tif (this.state.formName && !this.state.formName.replace(/\\s/g,\"\") == \"\" && this.state.elements.length !== 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: ''\r\n\t\t\t});\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: '/saveform',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tformName: this.state.formName,\r\n\t\t\t\t\tformElements: this.state.elements,\r\n\t\t\t\t\ttime: Math.floor((new Date()).getTime() / 1000),\r\n\t\t\t\t\tnumOfResponses: 0 \r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response.data.formID);\r\n\t\t\t\tvar redirectTo = \"/edit/\" + response.data.formID;\r\n\t\t\t\tconsole.log(\"about to redirect\")\r\n\t\t\t\tthis.props.history.push( redirectTo );\r\n\t\t\t})\r\n\t\t\t.catch((response) => {\r\n\t\t\t\tconsole.log(\"could not send data to /saveform\")\r\n\t\t\t})\r\n\t\t\t\r\n\t\t}else if(this.state.elements.length == 0){\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please add at least one form Element</p>\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please Enter a Name for the Form</p>\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\teditElement = (e) =>{\r\n\t\tvar elementToEdit = this.state.elements[e.target.id];\r\n\t\tvar theDetailsPanel;\r\n\t\tconsole.log(elementToEdit);\r\n\t\tswitch(elementToEdit.type) {\r\n\t\t\tcase \"Single-line\":\r\n\t\t\t\tconsole.log(\"About to edit a single line element\");\r\n\t\t\t\ttheDetailsPanel = <SingleLineInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"Textarea\":\r\n\t\t\t\tconsole.log(\"Its textarea-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <TextareaInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Radio\":\r\n\t\t\t\tconsole.log(\"Its radio-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <RadioBtnDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Checkboxes\":\r\n\t\t\t\tconsole.log(\"Its checkbox-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <CheckboxesDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: theDetailsPanel\r\n\t\t})\r\n\t}\r\n\r\n\tcloseDetailsPanel = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: null\r\n\t\t})\r\n\t}\r\n\r\n\tdeleteElement = (e) => {\r\n\t\tvar elementsToUpdate = this.state.elements;\r\n\t\tconsole.log(\"delete index: \" + e.target.id)\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\telementsToUpdate.splice(e.target.id, 1);\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\tthis.setState({\r\n\t\t\telements: elementsToUpdate\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.displayData){\r\n\t\t\treturn (\r\n\t\t\t<div className=\"theForm create-form\">\r\n\t\t\t    <Navbar isAuth={true} />\r\n\t\t\t\t<h2 className=\"create-form-heading\">Create Form</h2>\r\n\t\t\t\t<div className=\"form-name-container\">\r\n\t\t\t\t\t<label>Name of Form: </label>\r\n\t\t\t\t\t<input className=\"formName-input\" onChange={(e)=>{this.setState({formName: e.target.value})}} type=\"text\" name=\"form-name\" placeholder=\"Name of Form\" autoComplete=\"off\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t{ this.state.generatedElementsList }\r\n\t\t\t\t{ this.state.detailsPanel }\r\n\t\t\t\t<AddFormElements addElement={(element)=> this.addElement(element)}/>\t\t\t\t\r\n\t\t\t\t{ this.state.errorToDisplay }\r\n\t\t\t\t<button onClick={this.saveForm} className=\"end-of-form-btn\">Create</button>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t\t<img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default CreateForm;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Context\\AuthContext.js",["131"],"import React, { Component, createContext } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n  state = {\r\n    isLoggedIn: false\r\n  }\r\n\r\n  checkAuthAndReturnData = (requiredData, formID = null) => {\r\n    return new Promise((resolve, reject)=>{\r\n      axios({\r\n        method: 'post',\r\n        url: '/authtest',\r\n        data: {\r\n          requiredData:  requiredData,\r\n          formID: formID\r\n        }\r\n      })\r\n      .then((response) => {\r\n          // handle success\r\n          console.log(\"Server returned: \" + response.data);\r\n          var result = response.data;\r\n          if (result == \"Wrong Form ID\") {\r\n            console.log(\"Server said 'Wrong Form ID\");\r\n            this.props.history.push(\"/pagenotfound\");\r\n          }else if (!result) {\r\n            // If not authenticated\r\n            console.log(\"Redirecting. Not logged In\");\r\n            this.props.history.push(\"/login\");\r\n            reject(false);\r\n          }else{\r\n            // If authenticated\r\n            console.log(\"Logged In\");\r\n            this.setState({\r\n              isLoggedIn: true\r\n            }, ()=>{\r\n              resolve(result);\r\n            });\r\n            // console.log(result);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          // handle error\r\n          console.log(\"In the catch method of axios in AuthContext()\");\r\n          console.log(error);\r\n          this.props.history.push(\"/Login\");\r\n          reject(false);\r\n      })\r\n    });\r\n  \r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <AuthContext.Provider value={{ checkAuthAndReturnData: this.checkAuthAndReturnData, isLoggedIn: this.state.isLoggedIn}}>\r\n        {this.props.children}\r\n      </AuthContext.Provider>\r\n    );\r\n  }\r\n}\r\n \r\nexport default withRouter(AuthContextProvider);","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\Responses.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\FormToFill.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\AddFormElements.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\SingleLineInputDetails.js",["132"],"import React, { Component } from 'react';\r\n\r\nclass SingleLineInputDetails extends Component {\r\n\r\n  state = {\r\n    question: '',\r\n    action: 'Add',\r\n    emptyFieldError: ''\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.defaultValues) {\r\n      console.log(\"Have Default Values\");\r\n      console.log(this.props.defaultValues);\r\n      this.setState({\r\n        question: this.props.defaultValues.question,\r\n        action: 'Done'\r\n      })\r\n    }else{\r\n      console.log(\"Don't have default values\")\r\n    }\r\n  }\r\n  createElement = (e) => {\r\n    e.preventDefault();\r\n    \r\n    var element = {\r\n      type: \"Single-line\",\r\n      question: this.state.question,\r\n    }\r\n    if(element.question && !element.question.replace(/\\s/g,\"\") == \"\"){\r\n      console.log(\"Create Element Ran\");\r\n      this.setState({\r\n        emptyFieldError: ''\r\n      });\r\n      this.props.sendElement(element, e.target.id);\r\n      this.props.closeDetailsPanel(e);\r\n    }else{\r\n      console.log(\"Empty field\");\r\n      this.setState({\r\n        emptyFieldError: 'Please enter a question'\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  handleQuestion = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"detailsPanel single-line-input-details\">\r\n          <form className=\"detailsForm\" onSubmit={(e)=>{e.preventDefault()}}>\r\n              <h2 className=\"details-panel-heading\">Add a Single line Field</h2>\r\n              <input type=\"text\" id=\"question\" value={this.state.question} placeholder=\"Enter the Question\" onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <p className=\"empty-field-error\" >{this.state.emptyFieldError}</p>\r\n              <div className=\"details-panel-btns\">\r\n                <button onClick={this.createElement} id={this.props.elementIndex} >{this.state.action}</button>\r\n                {/* <input onSubmit={this.createElement} type=\"submit\" value=\"Adddd\" /> */}\r\n                <button onClick={this.props.closeDetailsPanel}>Cancel</button>\r\n              </div>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleLineInputDetails","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\TextareaInputDetails.js",["133"],"import React, { Component } from 'react';\r\n\r\nclass TextareaInputDetails extends Component {\r\n\r\n  state = {\r\n    question: '',\r\n    maxlength: '',\r\n    action: 'Add',\r\n    emptyFieldError: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    if (this.props.defaultValues) {\r\n      console.log(\"Have Default Values\");\r\n      console.log(this.props.defaultValues);\r\n      this.setState({\r\n        question: this.props.defaultValues.question,\r\n        maxlength: this.props.defaultValues.maxlength,\r\n        action: 'Done'\r\n      })\r\n    }else{\r\n      console.log(\"Don't have default values\")\r\n    }\r\n  }\r\n\r\n  createElement = (e) => {\r\n    e.preventDefault();\r\n    \r\n    var element = {\r\n      type: \"Textarea\",\r\n      question: this.state.question,\r\n      maxlength: this.state.maxlength,\r\n    }\r\n    if(element.question && !element.question.replace(/\\s/g,\"\") == \"\"){\r\n      console.log(\"Create Element Ran\");\r\n      this.setState({\r\n        emptyFieldError: ''\r\n      });\r\n      this.props.sendElement(element, e.target.id);\r\n      this.props.closeDetailsPanel(e);\r\n    }else{\r\n      console.log(\"Empty field\");\r\n      this.setState({\r\n        emptyFieldError: 'Please enter a question'\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  handleQuestion = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"detailsPanel textarea-input-details\">\r\n          <form className=\"detailsForm\">\r\n              <h2 className=\"details-panel-heading\">Add a Textarea</h2>\r\n              <input type=\"text\" id=\"question\" placeholder=\"Enter the Question\" value={this.state.question} onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <input type=\"number\" id=\"maxlength\" placeholder=\"Character Limit (Optional)\" value={this.state.maxlength} onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <p className=\"empty-field-error\" >{this.state.emptyFieldError}</p>\r\n              <div className=\"details-panel-btns\">\r\n                <button onClick={this.createElement} id={this.props.elementIndex}>{this.state.action}</button>\r\n                <button onClick={this.props.closeDetailsPanel}>Cancel</button>\r\n              </div>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextareaInputDetails","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\CheckboxesDetailsPanel.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\RadioBtnDetailsPanel.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Checkboxes.js",["134"],"import React from 'react';\r\n\r\nconst Checkboxes = ({question, values, id, editElement, deleteElement}) => {\r\n\r\n    if (editElement) {\r\n        console.log(\"Editing Buttons should be visible\");\r\n        var editButtons = <div className=\"edit-form-btns-container\">\r\n            <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n            <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n        </div>\r\n    }else{\r\n        console.log(\"Ediing Buttons should NOT be visible\");\r\n        var editButtons = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"checkboxes-element form-element\" key={id}>\r\n            <label className=\"form-element-question\">{question}</label>\r\n            {\r\n                values.map((value, index) => {\r\n                    return(\r\n                        <div key={index}>\r\n                            <input className=\"checkbox-element-input\" type=\"checkbox\" name={question} id={`question${id+1}`} value={value} />\r\n                            <label htmlFor={`question${id+1}`}>{value}</label>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {editButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Checkboxes","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\RadioBtn.js",["135"],"import React from 'react';\r\n\r\nconst RadioBtn = ({question, values, id, editElement, deleteElement}) => {\r\n\r\n    if (editElement) {\r\n        console.log(\"Editing Buttons should be visible\");\r\n        var editButtons = <div className=\"edit-form-btns-container\">\r\n            <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n            <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n        </div>\r\n    }else{\r\n        console.log(\"Ediing Buttons should NOT be visible\");\r\n        var editButtons = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"radio-btn-element form-element\" key={id}>\r\n            <label className=\"form-element-question\">{question}</label>\r\n            {\r\n                values.map((value, index) => {\r\n                    return(\r\n                        <div key={index}>\r\n                            <input className=\"radio-element-input\" type=\"radio\" name={question} id={`question${id+1}`} value={value} required/>\r\n                            <label htmlFor={`question${id+1}`}>{value}</label> \r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {editButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioBtn","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Textarea.js",["136","137"],"import React, { Component } from 'react';\r\nclass Textarea extends Component {\r\n\r\n  state = { \r\n    charsTyped: 0\r\n  }\r\n\r\n  componentDidMount(){\r\n    var textareaId = `#question${this.props.id+1}`;\r\n    var textareaValueLength = document.querySelector(textareaId).value.length;\r\n    this.setState({\r\n      charsTyped: textareaValueLength\r\n    })\r\n  }\r\n\r\n  handleTyping = (e)=>{\r\n    var charsTyped = e.target.value.length;\r\n    this.setState({\r\n      charsTyped: charsTyped\r\n    })\r\n  }\r\n\r\n  render() { \r\n    const {question, maxlength, id, editElement, deleteElement} = this.props;\r\n    if (editElement) {\r\n      console.log(\"Editing Buttons should be visible\");\r\n      var editButtons = <div className=\"edit-form-btns-container\">\r\n        <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n        <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n      </div>\r\n    }else{\r\n      console.log(\"Editing Buttons should NOT be visible\");\r\n      var editButtons = null;\r\n    }\r\n\r\n    if (this.props.maxlength && this.props.maxlength>=0) {\r\n      var charLimitDisplay = <p className=\"char-limit-textarea\">{this.state.charsTyped}/{this.props.maxlength}</p>\r\n    }else{\r\n      var charLimitDisplay = null;\r\n    }\r\n    return (\r\n      <div className=\"text-area-element form-element\" key={id}>\r\n          <label htmlFor={`question${id+1}`} className=\"form-element-question\">{question}</label>\r\n          <textarea onChange={this.handleTyping} className=\"textarea-element-input\" name={question} id={`question${id+1}`} rows=\"10\" cols=\"30\" maxLength={maxlength} required></textarea>\r\n          {editButtons}\r\n          {charLimitDisplay}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Textarea;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\SingleLine.js",["138"],"import React from 'react';\r\n\r\nconst SingleLine = ({question, id, editElement, deleteElement}) => {\r\n  if (editElement) {\r\n    console.log(\"Editing Buttons should be visible\");\r\n    var editButtons = <div className=\"edit-form-btns-container\">\r\n      <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n      <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n    </div>\r\n  }else{\r\n    console.log(\"Ediing Buttons should NOT be visible\");\r\n    var editButtons = null;\r\n  }\r\n  return (\r\n    <div className=\"single-line-element form-element\" key={id} id={id}>\r\n        <label htmlFor={`question${id+1}`} className=\"form-element-question\">{question}</label>\r\n        <input className=\"oneline-element-input\" type=\"text\" name={question} id={`question${id+1}`} autoComplete=\"off\" required/>\r\n        {editButtons}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleLine","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SingleResponse.js",["139","140"],"import React from 'react';\r\n\r\nconst SingleResponse = ({response, index}) => {\r\n    console.log(response);\r\n    var generatedResponse = [];\r\n    for (var question in response) {\r\n        if (response.hasOwnProperty(question)) {\r\n            console.log(question + \" -> \" + response[question]);\r\n            if (Array.isArray(response[question])) {\r\n                var checkboxAnswers = []\r\n                response[question].forEach(checkboxAnswer => {\r\n                    var answer = <p>{checkboxAnswer}</p>\r\n                    checkboxAnswers.push(answer);\r\n                });\r\n\r\n                // </div>\r\n                var toAppend = \r\n                <div className=\"single-response-element\">\r\n                    <h3 className=\"response-question\">{question}</h3>\r\n                    <div>\r\n                        {checkboxAnswers}\r\n                    </div>\r\n                </div>\r\n            }else{\r\n                var toAppend = \r\n                <div className=\"single-response-element\">\r\n                    <h3 className=\"response-question\">{question}</h3>\r\n                    <p>{response[question]}</p>\r\n                </div>\r\n            }\r\n            generatedResponse.push(toAppend);\r\n        }\r\n    }\r\n  return (\r\n    <div className=\"single-response\" key={index}>\r\n        <p className=\"response-number\">{`Response No. ${index+1}`}</p>\r\n        {generatedResponse}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleResponse","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SubmissionStatus.js",["141","142"],"import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport * as QueryString from \"query-string\"\r\n\r\nconst SubmissionStatus = (props) => {\r\n\r\n  console.log(\"Query Parameters: \");\r\n  const params = QueryString.parse(props.location.search);\r\n  console.log(params.result);\r\n  console.log(props.history);\r\n\r\n  // sendToSignUp = ()=>{\r\n  //   props.history.push('/signup')\r\n  // }\r\n  if (params.result == 'true') {\r\n    return (\r\n        <div className=\"submission-status-container\">\r\n            <h4>Thank You for your Response!</h4>\r\n            <p>Create your own forms at Doodle Forms today!</p>\r\n            {/* <NavLink to=\"/signup\">Create Form</NavLink> */}\r\n            <button className=\"submission-status-button\" onClick={()=>{props.history.push('/create')}}>Create Form</button>\r\n        </div>\r\n    );\r\n\r\n  }else{\r\n    return (\r\n      <div className=\"submission-status-container\">\r\n          <h4>Oh no!</h4>\r\n          <p>An Error Occured while submitting your form.</p>\r\n          {/* <NavLink to=\"/signup\">Back to Form</NavLink> */}\r\n          <button className=\"submission-status-button\" onClick={props.history.goBack} >Back to Form</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmissionStatus","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Page404.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\DashboardListItem.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":14},{"ruleId":"147","severity":1,"message":"151","line":2,"column":18,"nodeType":"149","messageId":"150","endLine":2,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":31,"column":13,"nodeType":"154","endLine":31,"endColumn":34},{"ruleId":"155","severity":1,"message":"156","line":44,"column":34,"nodeType":"157","messageId":"158","endLine":44,"endColumn":36},{"ruleId":"147","severity":1,"message":"159","line":97,"column":13,"nodeType":"149","messageId":"150","endLine":97,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":160,"column":69,"nodeType":"157","messageId":"158","endLine":160,"endColumn":71},{"ruleId":"155","severity":1,"message":"156","line":188,"column":39,"nodeType":"157","messageId":"158","endLine":188,"endColumn":41},{"ruleId":"155","severity":1,"message":"156","line":105,"column":69,"nodeType":"157","messageId":"158","endLine":105,"endColumn":71},{"ruleId":"155","severity":1,"message":"156","line":129,"column":39,"nodeType":"157","messageId":"158","endLine":129,"endColumn":41},{"ruleId":"155","severity":1,"message":"156","line":26,"column":22,"nodeType":"157","messageId":"158","endLine":26,"endColumn":24},{"ruleId":"155","severity":1,"message":"156","line":29,"column":64,"nodeType":"157","messageId":"158","endLine":29,"endColumn":66},{"ruleId":"155","severity":1,"message":"156","line":34,"column":64,"nodeType":"157","messageId":"158","endLine":34,"endColumn":66},{"ruleId":"160","severity":1,"message":"161","line":13,"column":13,"nodeType":"149","messageId":"162","endLine":13,"endColumn":24},{"ruleId":"160","severity":1,"message":"161","line":13,"column":13,"nodeType":"149","messageId":"162","endLine":13,"endColumn":24},{"ruleId":"160","severity":1,"message":"161","line":33,"column":11,"nodeType":"149","messageId":"162","endLine":33,"endColumn":22},{"ruleId":"160","severity":1,"message":"163","line":39,"column":11,"nodeType":"149","messageId":"162","endLine":39,"endColumn":27},{"ruleId":"160","severity":1,"message":"161","line":12,"column":9,"nodeType":"149","messageId":"162","endLine":12,"endColumn":20},{"ruleId":"164","severity":1,"message":"165","line":11,"column":44,"nodeType":"166","messageId":"167","endLine":14,"endColumn":18},{"ruleId":"160","severity":1,"message":"168","line":25,"column":21,"nodeType":"149","messageId":"162","endLine":25,"endColumn":29},{"ruleId":"147","severity":1,"message":"169","line":2,"column":9,"nodeType":"149","messageId":"150","endLine":2,"endColumn":16},{"ruleId":"155","severity":1,"message":"156","line":15,"column":21,"nodeType":"157","messageId":"158","endLine":15,"endColumn":23},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'seconds' is assigned a value but never used.","no-redeclare","'editButtons' is already defined.","redeclared","'charLimitDisplay' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'checkboxAnswers'.","ArrowFunctionExpression","unsafeRefs","'toAppend' is already defined.","'NavLink' is defined but never used.","no-global-assign","no-unsafe-negation"]