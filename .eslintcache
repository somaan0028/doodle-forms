[{"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\index.js":"1","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\reportWebVitals.js":"2","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\App.js":"3","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Home.js":"4","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\Dashboard.js":"5","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Navbar.js":"6","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Signup.js":"7","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Login.js":"8","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\EditableForm.js":"9","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\CreateForm.js":"10","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Context\\AuthContext.js":"11","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\Responses.js":"12","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\FormToFill.js":"13","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\AddFormElements.js":"14","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\SingleLineInputDetails.js":"15","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\TextareaInputDetails.js":"16","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\CheckboxesDetailsPanel.js":"17","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\RadioBtnDetailsPanel.js":"18","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Checkboxes.js":"19","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\RadioBtn.js":"20","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Textarea.js":"21","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\SingleLine.js":"22","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SingleResponse.js":"23","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SubmissionStatus.js":"24","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Page404.js":"25","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\DashboardListItem.js":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":1674,"mtime":1609298917052,"results":"30","hashOfConfig":"28"},{"size":578,"mtime":1609322278703,"results":"31","hashOfConfig":"28"},{"size":3819,"mtime":1609488002640,"results":"32","hashOfConfig":"28"},{"size":2585,"mtime":1609298879970,"results":"33","hashOfConfig":"28"},{"size":2669,"mtime":1609326831868,"results":"34","hashOfConfig":"28"},{"size":2584,"mtime":1609326630482,"results":"35","hashOfConfig":"28"},{"size":7398,"mtime":1609428132473,"results":"36","hashOfConfig":"28"},{"size":6983,"mtime":1609428128344,"results":"37","hashOfConfig":"28"},{"size":1895,"mtime":1609255933791,"results":"38","hashOfConfig":"28"},{"size":2050,"mtime":1609333268168,"results":"39","hashOfConfig":"28"},{"size":3239,"mtime":1609333254401,"results":"40","hashOfConfig":"28"},{"size":2967,"mtime":1609312542873,"results":"41","hashOfConfig":"28"},{"size":2136,"mtime":1609426006871,"results":"42","hashOfConfig":"28"},{"size":2282,"mtime":1609426124262,"results":"43","hashOfConfig":"28"},{"size":4847,"mtime":1609426138917,"results":"44","hashOfConfig":"28"},{"size":5005,"mtime":1609426133110,"results":"45","hashOfConfig":"28"},{"size":1370,"mtime":1609319484648,"results":"46","hashOfConfig":"28"},{"size":1368,"mtime":1609319351624,"results":"47","hashOfConfig":"28"},{"size":1042,"mtime":1609319071072,"results":"48","hashOfConfig":"28"},{"size":1020,"mtime":1609315156784,"results":"49","hashOfConfig":"28"},{"size":577,"mtime":1608872696751,"results":"50","hashOfConfig":"28"},{"size":965,"mtime":1609235853643,"results":"51","hashOfConfig":"28"},{"size":335,"mtime":1609300211709,"results":"52","hashOfConfig":"28"},{"size":1434,"mtime":1609428982339,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"od9s71",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\index.js",[],["118","119"],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\reportWebVitals.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\App.js",["120"],"import React, { Component } from 'react';\nimport CreateForm from './Dashboard/CreateForm';\nimport EditableForm from './Dashboard/EditableForm';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from './Home/Navbar.js';\nimport Home from './Home/Home.js';\nimport Signup from './auth/Signup.js';\nimport Login from './auth/Login.js';\nimport Dashboard from './Dashboard/Dashboard.js';\nimport AuthContextProvider from './Context/AuthContext';\nimport Responses from './Responses/Responses';\nimport FormToFill from './Responses/FormToFill';\nimport Page404 from './Page404'\nimport SubmissionStatus from './Responses/SubmissionStatus'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <AuthContextProvider>\n          <div className=\"App\">\n            {/* <Navbar isAuth={true} /> */}\n            <Switch>\n              <Route exact path='/' component={Home} />\n              <Route exact path='/signup' component={Signup} />\n              <Route exact path='/login' component={Login} />\n              <Route exact path='/Dashboard' component={Dashboard} />\n              <Route exact path='/create' component={CreateForm} />\n              <Route exact path='/edit/:form_id' component={EditableForm} />\n              <Route exact path='/responses/:form_id' component={Responses} />\n              <Route exact path='/form/:form_id' component={FormToFill} />\n              <Route exact path='/formsubmission' component={SubmissionStatus} />\n              <Route path=\"*\" component={Page404} />\n            </Switch>\n          </div>\n        </AuthContextProvider>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Home.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\Dashboard.js",["121"],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Home\\Navbar.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Signup.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\auth\\Login.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\EditableForm.js",["122","123"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SingleLine from '../Form-Elements/SingleLine';\r\nimport RadioBtn from '../Form-Elements/RadioBtn';\r\nimport Checkboxes from '../Form-Elements/Checkboxes';\r\nimport Textarea from '../Form-Elements/Textarea';\r\n\r\nimport SingleLineInputDetails from '../Detail-Panels/SingleLineInputDetails';\r\nimport TextareaInputDetails from '../Detail-Panels/TextareaInputDetails';\r\nimport RadioBtnDetailsPanel from '../Detail-Panels/RadioBtnDetailsPanel';\r\nimport CheckboxesDetailsPanel from '../Detail-Panels/CheckboxesDetailsPanel';\r\n\r\nimport Navbar from '../Home/Navbar.js';\r\nimport AddFormElements from './AddFormElements';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport loadingGif from '../loading_gif.gif'\r\n\r\nclass EditableForm extends Component {\r\n\r\n\tstatic contextType = AuthContext;\r\n\r\n\tstate = {\r\n\t\tformName: \"\",\r\n\t\telements: [],\r\n\t\tgeneratedElementsList:[],\r\n\t\tdetailsPanel: null,\r\n\t\terrorToDisplay: '',\r\n\t\tdisplayData: false\r\n\t}\r\n\r\n\tgenerateElements = () => {\r\n\t\tvar elements = this.state.elements;\r\n\t\tvar generatedElements = [];\r\n\r\n\t\tgeneratedElements = elements.map((element, index)=>{\r\n\t\t\tvar elementType = element.type;\r\n\t\t\t// var generatedElement;\r\n\t\t\tswitch(elementType) {\r\n\t\t\t\tcase \"Single-line\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <SingleLine question={element.question} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Textarea\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <Textarea question={element.question} maxlength={element.maxlength} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Radio\":\r\n\t\t\t\t\tconsole.log(\"Its a Radio element\");\r\n\t\t\t\t\treturn <RadioBtn question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Checkboxes\":\r\n\t\t\t\t\tconsole.log(\"Its a Checkbox element\");\r\n\t\t\t\t\treturn <Checkboxes question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tgeneratedElementsList: generatedElements\r\n\t\t});\r\n\t\t// console.log(generatedElements);\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\r\n\t\tconst { checkAuthAndReturnData } = this.context;\r\n\r\n\t\tif (window.location.pathname.substr(6).length !== 24) {\r\n\t\t\tconsole.log(\"Form length very short\");\r\n\t\t\tthis.props.history.push(\"/pagenotfound\");\r\n\t\t}\r\n\t\t\r\n\t\tcheckAuthAndReturnData('SingleForm', window.location.pathname.substr(6))\r\n\t\t.then((result)=>{\r\n\t\t\tconsole.log(\"Data from server checkAuthAndReturnData() \");\r\n\t\t\tconsole.log(result);\r\n\t\t\tthis.setState({\r\n\t\t\t\tformName: result.formName,\r\n\t\t\t\telements: result.formElements,\r\n\t\t\t\tdisplayData: true\r\n\t\t\t}, ()=>{this.generateElements()})\r\n\t\t})\r\n\t\t.catch((response) => {\r\n\t\t\tconsole.log(\"could not get form from /getform\")\r\n\t\t})\r\n\t}\r\n\r\n\taddElement = (element) => {\r\n\t\tvar updatedElementsList = [...this.state.elements, element]\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList,\r\n\t\t\terrorToDisplay: ''\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\tconsole.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be added\");\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\tupdateElement = (element, index) => {\r\n\t\tvar updatedElementsList = [...this.state.elements];\r\n\t\tupdatedElementsList[index] = element;\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\t// console.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be updated\");\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\tupdateForm = () => {\r\n\t\tif (this.state.formName && !this.state.formName.replace(/\\s/g,\"\") == \"\" && this.state.elements.length !== 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: ''\r\n\t\t\t})\t\t\t\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: '/updateform',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tformID: window.location.pathname.substr(6),\r\n\t\t\t\t\tformElements: this.state.elements,\r\n\t\t\t\t\tformName: this.state.formName\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(function (response) {\r\n\t\t\t\tconsole.log(response.data);\r\n\t\t\t})\r\n\t\t\t.catch(function (response) {\r\n\t\t\t\tconsole.log(\"could not send date\")\r\n\t\t\t})\r\n\t\t}else if(this.state.elements.length == 0){\r\n\t\t\tconsole.log(\"Name field is empty\")\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please add at least one Form Element</p>\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please Enter a Name for the Form</p>\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t\r\n\teditElement = (e) =>{\r\n\t\tvar elementToEdit = this.state.elements[e.target.id];\r\n\t\tvar theDetailsPanel;\r\n\t\tconsole.log(elementToEdit);\r\n\t\tswitch(elementToEdit.type) {\r\n\t\t\tcase \"Single-line\":\r\n\t\t\t\tconsole.log(\"About to edit a single line element\");\r\n\t\t\t\ttheDetailsPanel = <SingleLineInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"Textarea\":\r\n\t\t\t\tconsole.log(\"Its textarea-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <TextareaInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Radio\":\r\n\t\t\t\tconsole.log(\"Its radio-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <RadioBtnDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Checkboxes\":\r\n\t\t\t\tconsole.log(\"Its checkbox-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <CheckboxesDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: theDetailsPanel\r\n\t\t})\r\n\t}\r\n\r\n\tcloseDetailsPanel = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: null\r\n\t\t})\r\n\t}\r\n\r\n\tdeleteElement = (e) => {\r\n\t\tvar elementsToUpdate = this.state.elements;\r\n\t\tconsole.log(\"delete index: \" + e.target.id)\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\telementsToUpdate.splice(e.target.id, 1);\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\tthis.setState({\r\n\t\t\telements: elementsToUpdate\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.displayData) {\r\n\t\t\treturn (\r\n\t\t\t<div className=\"theForm editable-form\">\r\n\t\t\t    <Navbar isAuth={true} />\r\n\t\t\t\t<div className=\"form-name-container\">\r\n\t\t\t\t\t<label>Name of Form: </label>\r\n\t\t\t\t\t<input className=\"formName-input\" value={this.state.formName} onChange={(e)=>{e.preventDefault(); this.setState({formName: e.target.value})}} type=\"text\" name=\"formName\" autoComplete=\"off\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t{ this.state.generatedElementsList }\r\n\t\t\t\t{ this.state.detailsPanel }\r\n\t\t\t\t<AddFormElements addElement={(element)=> this.addElement(element)}/>\r\n\t\t\t\t{ this.state.errorToDisplay }\r\n\t\t\t\t<button onClick={this.updateForm} className=\"end-of-form-btn\">Update</button>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default EditableForm;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\CreateForm.js",["124","125"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SingleLine from '../Form-Elements/SingleLine';\r\nimport RadioBtn from '../Form-Elements/RadioBtn';\r\nimport Checkboxes from '../Form-Elements/Checkboxes';\r\nimport Textarea from '../Form-Elements/Textarea';\r\n\r\nimport SingleLineInputDetails from '../Detail-Panels/SingleLineInputDetails';\r\nimport TextareaInputDetails from '../Detail-Panels/TextareaInputDetails';\r\nimport RadioBtnDetailsPanel from '../Detail-Panels/RadioBtnDetailsPanel';\r\nimport CheckboxesDetailsPanel from '../Detail-Panels/CheckboxesDetailsPanel';\r\n\r\nimport Navbar from '../Home/Navbar.js';\r\nimport AddFormElements from './AddFormElements';\r\nimport { AuthContext } from '../Context/AuthContext';\r\nimport loadingGif from '../loading_gif.gif'\r\n\r\nclass CreateForm extends Component {\r\n\r\n    static contextType = AuthContext;\r\n\r\n\tstate = {\r\n\t\tformName: \"\",\r\n\t\telements: [],\r\n\t\tgeneratedElementsList:[],\r\n\t\tdetailsPanel: null,\r\n\t\terrorToDisplay: '',\r\n\t\tdisplayData: false\r\n    }\r\n\r\n\tgenerateElements = () => {\r\n\t\tvar elements = this.state.elements;\r\n\t\tvar generatedElements = [];\r\n\r\n\t\tgeneratedElements = elements.map((element, index)=>{\r\n\t\t\tvar elementType = element.type;\r\n\t\t\t// var generatedElement;\r\n\t\t\tswitch(elementType) {\r\n\t\t\t\tcase \"Single-line\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <SingleLine question={element.question} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Textarea\":\r\n\t\t\t\t\tconsole.log(\"Its a single line element\");\r\n\t\t\t\t\treturn <Textarea question={element.question} maxlength={element.maxlength} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Radio\":\r\n\t\t\t\t\tconsole.log(\"Its a Radio element\");\r\n\t\t\t\t\treturn <RadioBtn question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tcase \"Checkboxes\":\r\n\t\t\t\t\tconsole.log(\"Its a Checkbox element\");\r\n\t\t\t\t\treturn <Checkboxes question={element.question} values={element.values} id={index} key={index} editElement={this.editElement} deleteElement={this.deleteElement}/>;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tgeneratedElementsList: generatedElements\r\n\t\t});\r\n\t\t// console.log(generatedElements);\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tconst { checkAuthAndReturnData } = this.context;\r\n        checkAuthAndReturnData().then(()=>{\r\n\t\t\tconsole.log(this.state.elements);\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplayData: true\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\taddElement = (element) => {\r\n\t\tvar updatedElementsList = [...this.state.elements, element]\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList,\r\n\t\t\terrorToDisplay: ''\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\tconsole.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be added\");\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\tupdateElement = (element, index) => {\r\n\t\tvar updatedElementsList = [...this.state.elements];\r\n\t\tupdatedElementsList[index] = element;\r\n\t\tthis.setState({\r\n\t\t\telements: updatedElementsList\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t\t// console.log(this.state.elements);\r\n\t\t\tconsole.log(\"Element should be updated\");\r\n\t\t});\r\n\t}\r\n\r\n\tsaveForm = () => {\r\n\t\tif (this.state.formName && !this.state.formName.replace(/\\s/g,\"\") == \"\" && this.state.elements.length !== 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: ''\r\n\t\t\t});\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: '/saveform',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tformName: this.state.formName,\r\n\t\t\t\t\tformElements: this.state.elements\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response.data.formID);\r\n\t\t\t\tvar redirectTo = \"/edit/\" + response.data.formID;\r\n\t\t\t\tconsole.log(\"about to redirect\")\r\n\t\t\t\tthis.props.history.push( redirectTo );\r\n\t\t\t})\r\n\t\t\t.catch((response) => {\r\n\t\t\t\tconsole.log(\"could not send data to /saveform\")\r\n\t\t\t})\r\n\t\t\t\r\n\t\t}else if(this.state.elements.length == 0){\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please add at least one form Element</p>\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\tthis.setState({\r\n\t\t\t\terrorToDisplay: <p className=\"error-msg\">Please Enter a Name for the Form</p>\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\teditElement = (e) =>{\r\n\t\tvar elementToEdit = this.state.elements[e.target.id];\r\n\t\tvar theDetailsPanel;\r\n\t\tconsole.log(elementToEdit);\r\n\t\tswitch(elementToEdit.type) {\r\n\t\t\tcase \"Single-line\":\r\n\t\t\t\tconsole.log(\"About to edit a single line element\");\r\n\t\t\t\ttheDetailsPanel = <SingleLineInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"Textarea\":\r\n\t\t\t\tconsole.log(\"Its textarea-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <TextareaInputDetails closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Radio\":\r\n\t\t\t\tconsole.log(\"Its radio-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <RadioBtnDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"Checkboxes\":\r\n\t\t\t\tconsole.log(\"Its checkbox-input-btn\");\r\n\t\t\t\ttheDetailsPanel = <CheckboxesDetailsPanel closeDetailsPanel={this.closeDetailsPanel} sendElement={(element, index)=>{this.updateElement(element, index)}} defaultValues={elementToEdit} elementIndex={e.target.id}/>;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"No element\");\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: theDetailsPanel\r\n\t\t})\r\n\t}\r\n\r\n\tcloseDetailsPanel = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tdetailsPanel: null\r\n\t\t})\r\n\t}\r\n\r\n\tdeleteElement = (e) => {\r\n\t\tvar elementsToUpdate = this.state.elements;\r\n\t\tconsole.log(\"delete index: \" + e.target.id)\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\telementsToUpdate.splice(e.target.id, 1);\r\n\t\tconsole.log(elementsToUpdate);\r\n\t\tthis.setState({\r\n\t\t\telements: elementsToUpdate\r\n\t\t}, ()=>{\r\n\t\t\tthis.generateElements();\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.displayData){\r\n\t\t\treturn (\r\n\t\t\t<div className=\"theForm create-form\">\r\n\t\t\t    <Navbar isAuth={true} />\r\n\t\t\t\t<div className=\"form-name-container\">\r\n\t\t\t\t\t<label>Name of Form: </label>\r\n\t\t\t\t\t<input className=\"formName-input\" onChange={(e)=>{this.setState({formName: e.target.value})}} type=\"text\" name=\"form-name\" placeholder=\"Name of Form\" autoComplete=\"off\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t{ this.state.generatedElementsList }\r\n\t\t\t\t{ this.state.detailsPanel }\r\n\t\t\t\t<AddFormElements addElement={(element)=> this.addElement(element)}/>\t\t\t\t\r\n\t\t\t\t{ this.state.errorToDisplay }\r\n\t\t\t\t<button onClick={this.saveForm} className=\"end-of-form-btn\">Create</button>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t\t<img className=\"loading-gif\" src={loadingGif} alt=\"loading...\" />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default CreateForm;","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Context\\AuthContext.js",["126"],"import React, { Component, createContext } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n  state = {\r\n    isLoggedIn: false\r\n  }\r\n\r\n  checkAuthAndReturnData = (requiredData, formID = null) => {\r\n    return new Promise((resolve, reject)=>{\r\n      axios({\r\n        method: 'post',\r\n        url: '/authtest',\r\n        data: {\r\n          requiredData:  requiredData,\r\n          formID: formID\r\n        }\r\n      })\r\n      .then((response) => {\r\n          // handle success\r\n          console.log(\"Server returned: \" + response.data);\r\n          var result = response.data;\r\n          if (result == \"Wrong Form ID\") {\r\n            console.log(\"Server said 'Wrong Form ID\");\r\n            this.props.history.push(\"/pagenotfound\");\r\n          }else if (!result) {\r\n            // If not authenticated\r\n            console.log(\"Redirecting. Not logged In\");\r\n            this.props.history.push(\"/login\");\r\n            reject(false);\r\n          }else{\r\n            // If authenticated\r\n            console.log(\"Logged In\");\r\n            this.setState({\r\n              isLoggedIn: true\r\n            }, ()=>{\r\n              resolve(result);\r\n            });\r\n            // console.log(result);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          // handle error\r\n          console.log(\"In the catch method of axios in AuthContext()\");\r\n          console.log(error);\r\n          this.props.history.push(\"/Login\");\r\n          reject(false);\r\n      })\r\n    });\r\n  \r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <AuthContext.Provider value={{ checkAuthAndReturnData: this.checkAuthAndReturnData, isLoggedIn: this.state.isLoggedIn}}>\r\n        {this.props.children}\r\n      </AuthContext.Provider>\r\n    );\r\n  }\r\n}\r\n \r\nexport default withRouter(AuthContextProvider);","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\Responses.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\FormToFill.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\AddFormElements.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\SingleLineInputDetails.js",["127"],"import React, { Component } from 'react';\r\n\r\nclass SingleLineInputDetails extends Component {\r\n\r\n  state = {\r\n    question: '',\r\n    action: 'Add',\r\n    emptyFieldError: ''\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.defaultValues) {\r\n      console.log(\"Have Default Values\");\r\n      console.log(this.props.defaultValues);\r\n      this.setState({\r\n        question: this.props.defaultValues.question,\r\n        action: 'Done'\r\n      })\r\n    }else{\r\n      console.log(\"Don't have default values\")\r\n    }\r\n  }\r\n  createElement = (e) => {\r\n    e.preventDefault();\r\n    \r\n    var element = {\r\n      type: \"Single-line\",\r\n      question: this.state.question,\r\n    }\r\n    if(element.question && !element.question.replace(/\\s/g,\"\") == \"\"){\r\n      console.log(\"Create Element Ran\");\r\n      this.setState({\r\n        emptyFieldError: ''\r\n      });\r\n      this.props.sendElement(element, e.target.id);\r\n      this.props.closeDetailsPanel(e);\r\n    }else{\r\n      console.log(\"Empty field\");\r\n      this.setState({\r\n        emptyFieldError: 'Please enter a question'\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  handleQuestion = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"detailsPanel single-line-input-details\">\r\n          <form className=\"detailsForm\" onSubmit={(e)=>{e.preventDefault()}}>\r\n              <h2 className=\"details-panel-heading\">Add a Single line Field</h2>\r\n              <input type=\"text\" id=\"question\" value={this.state.question} placeholder=\"Enter the Question\" onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <p className=\"empty-field-error\" >{this.state.emptyFieldError}</p>\r\n              <div className=\"details-panel-btns\">\r\n                <button onClick={this.createElement} id={this.props.elementIndex} >{this.state.action}</button>\r\n                {/* <input onSubmit={this.createElement} type=\"submit\" value=\"Adddd\" /> */}\r\n                <button onClick={this.props.closeDetailsPanel}>Cancel</button>\r\n              </div>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleLineInputDetails","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\TextareaInputDetails.js",["128"],"import React, { Component } from 'react';\r\n\r\nclass TextareaInputDetails extends Component {\r\n\r\n  state = {\r\n    question: '',\r\n    maxlength: '',\r\n    action: 'Add',\r\n    emptyFieldError: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    if (this.props.defaultValues) {\r\n      console.log(\"Have Default Values\");\r\n      console.log(this.props.defaultValues);\r\n      this.setState({\r\n        question: this.props.defaultValues.question,\r\n        maxlength: this.props.defaultValues.maxlength,\r\n        action: 'Done'\r\n      })\r\n    }else{\r\n      console.log(\"Don't have default values\")\r\n    }\r\n  }\r\n\r\n  createElement = (e) => {\r\n    e.preventDefault();\r\n    \r\n    var element = {\r\n      type: \"Textarea\",\r\n      question: this.state.question,\r\n      maxlength: this.state.maxlength,\r\n    }\r\n    if(element.question && !element.question.replace(/\\s/g,\"\") == \"\"){\r\n      console.log(\"Create Element Ran\");\r\n      this.setState({\r\n        emptyFieldError: ''\r\n      });\r\n      this.props.sendElement(element, e.target.id);\r\n      this.props.closeDetailsPanel(e);\r\n    }else{\r\n      console.log(\"Empty field\");\r\n      this.setState({\r\n        emptyFieldError: 'Please enter a question'\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  handleQuestion = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"detailsPanel textarea-input-details\">\r\n          <form className=\"detailsForm\">\r\n              <h2 className=\"details-panel-heading\">Add a Textarea</h2>\r\n              <input type=\"text\" id=\"question\" placeholder=\"Enter the Question\" value={this.state.question} onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <input type=\"number\" id=\"maxlength\" placeholder=\"Enter Max Limit (Optional)\" value={this.state.maxlength} onChange={this.handleQuestion} autoComplete=\"off\" />\r\n              <p className=\"empty-field-error\" >{this.state.emptyFieldError}</p>\r\n              <div className=\"details-panel-btns\">\r\n                <button onClick={this.createElement} id={this.props.elementIndex}>{this.state.action}</button>\r\n                <button onClick={this.props.closeDetailsPanel}>Cancel</button>\r\n              </div>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextareaInputDetails","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\CheckboxesDetailsPanel.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Detail-Panels\\RadioBtnDetailsPanel.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Checkboxes.js",["129"],"import React from 'react';\r\n\r\nconst Checkboxes = ({question, values, id, editElement, deleteElement}) => {\r\n\r\n    if (editElement) {\r\n        console.log(\"Editing Buttons should be visible\");\r\n        var editButtons = <div className=\"edit-form-btns-container\">\r\n            <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n            <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n        </div>\r\n    }else{\r\n        console.log(\"Ediing Buttons should NOT be visible\");\r\n        var editButtons = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"checkboxes-element form-element\" key={id}>\r\n            <label className=\"form-element-question\">{question}</label>\r\n            {\r\n                values.map((value, index) => {\r\n                    return(\r\n                        <div key={index}>\r\n                            <input className=\"checkbox-element-input\" type=\"checkbox\" name={question} id={`question${id+1}`} value={value} />\r\n                            <label htmlFor={`question${id+1}`}>{value}</label>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {editButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Checkboxes","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\RadioBtn.js",["130"],"import React from 'react';\r\n\r\nconst RadioBtn = ({question, values, id, editElement, deleteElement}) => {\r\n\r\n    if (editElement) {\r\n        console.log(\"Editing Buttons should be visible\");\r\n        var editButtons = <div className=\"edit-form-btns-container\">\r\n            <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n            <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n        </div>\r\n    }else{\r\n        console.log(\"Ediing Buttons should NOT be visible\");\r\n        var editButtons = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"radio-btn-element form-element\" key={id}>\r\n            <label className=\"form-element-question\">{question}</label>\r\n            {\r\n                values.map((value, index) => {\r\n                    return(\r\n                        <div key={index}>\r\n                            <input className=\"radio-element-input\" type=\"radio\" name={question} id={`question${id+1}`} value={value} required/>\r\n                            <label htmlFor={`question${id+1}`}>{value}</label> \r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {editButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioBtn","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\Textarea.js",["131"],"import React from 'react';\r\n\r\nconst Textarea = ({question, maxlength, id, editElement, deleteElement}) => {\r\n  if (editElement) {\r\n    console.log(\"Editing Buttons should be visible\");\r\n    var editButtons = <div className=\"edit-form-btns-container\">\r\n      <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n      <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n    </div>\r\n  }else{\r\n    console.log(\"Ediing Buttons should NOT be visible\");\r\n    var editButtons = null;\r\n  }\r\n  return (\r\n    <div className=\"text-area-element form-element\" key={id}>\r\n        <label htmlFor={`question${id+1}`} className=\"form-element-question\">{question}</label>\r\n        <textarea className=\"textarea-element-input\" name={question} id={`question${id+1}`} rows=\"10\" cols=\"30\" maxLength={maxlength} required></textarea>\r\n        {editButtons}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Textarea","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Form-Elements\\SingleLine.js",["132"],"import React from 'react';\r\n\r\nconst SingleLine = ({question, id, editElement, deleteElement}) => {\r\n  if (editElement) {\r\n    console.log(\"Editing Buttons should be visible\");\r\n    var editButtons = <div className=\"edit-form-btns-container\">\r\n      <button onClick={editElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" id={id} ></i></button>\r\n      <button onClick={deleteElement} id={id} className=\"edit-form-btns\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" id={id} ></i></button>\r\n    </div>\r\n  }else{\r\n    console.log(\"Ediing Buttons should NOT be visible\");\r\n    var editButtons = null;\r\n  }\r\n  return (\r\n    <div className=\"single-line-element form-element\" key={id} id={id}>\r\n        <label htmlFor={`question${id+1}`} className=\"form-element-question\">{question}</label>\r\n        <input className=\"oneline-element-input\" type=\"text\" name={question} id={`question${id+1}`} autoComplete=\"off\" required/>\r\n        {editButtons}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleLine","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SingleResponse.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Responses\\SubmissionStatus.js",["133"],"import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport * as QueryString from \"query-string\"\r\n\r\nconst SubmissionStatus = (props) => {\r\n\r\n  console.log(\"Query Parameters: \");\r\n  const params = QueryString.parse(props.location.search);\r\n  console.log(params.result);\r\n  console.log(props.history);\r\n\r\n  if (params.result == 'true') {\r\n    return (\r\n        <div className=\"submission-success\">\r\n            <h4>Thank You for your Response!</h4>\r\n            <p>Create your own forms at Doodle Forms</p>\r\n            <NavLink to=\"/signup\">Create Form</NavLink>\r\n        </div>\r\n    );\r\n\r\n  }else{\r\n    return (\r\n      <div className=\"submission-success\">\r\n          <h4>Oh no!</h4>\r\n          <p>An Error Occured while submitting your form.</p>\r\n          {/* <NavLink to=\"/signup\">Back to Form</NavLink> */}\r\n          <button onClick={props.history.goBack} >Back to Form</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmissionStatus","D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Page404.js",[],"D:\\Programming\\Node-JS\\Projects\\Doodle-Forms\\doodle-forms\\src\\Dashboard\\DashboardListItem.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":5,"column":8,"nodeType":"140","messageId":"141","endLine":5,"endColumn":14},{"ruleId":"142","severity":1,"message":"143","line":42,"column":34,"nodeType":"144","messageId":"145","endLine":42,"endColumn":36},{"ruleId":"142","severity":1,"message":"143","line":120,"column":69,"nodeType":"144","messageId":"145","endLine":120,"endColumn":71},{"ruleId":"142","severity":1,"message":"143","line":139,"column":39,"nodeType":"144","messageId":"145","endLine":139,"endColumn":41},{"ruleId":"142","severity":1,"message":"143","line":105,"column":69,"nodeType":"144","messageId":"145","endLine":105,"endColumn":71},{"ruleId":"142","severity":1,"message":"143","line":127,"column":39,"nodeType":"144","messageId":"145","endLine":127,"endColumn":41},{"ruleId":"142","severity":1,"message":"143","line":26,"column":22,"nodeType":"144","messageId":"145","endLine":26,"endColumn":24},{"ruleId":"142","severity":1,"message":"143","line":29,"column":64,"nodeType":"144","messageId":"145","endLine":29,"endColumn":66},{"ruleId":"142","severity":1,"message":"143","line":34,"column":64,"nodeType":"144","messageId":"145","endLine":34,"endColumn":66},{"ruleId":"146","severity":1,"message":"147","line":13,"column":13,"nodeType":"140","messageId":"148","endLine":13,"endColumn":24},{"ruleId":"146","severity":1,"message":"147","line":13,"column":13,"nodeType":"140","messageId":"148","endLine":13,"endColumn":24},{"ruleId":"146","severity":1,"message":"147","line":12,"column":9,"nodeType":"140","messageId":"148","endLine":12,"endColumn":20},{"ruleId":"146","severity":1,"message":"147","line":12,"column":9,"nodeType":"140","messageId":"148","endLine":12,"endColumn":20},{"ruleId":"142","severity":1,"message":"143","line":12,"column":21,"nodeType":"144","messageId":"145","endLine":12,"endColumn":23},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'editButtons' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]